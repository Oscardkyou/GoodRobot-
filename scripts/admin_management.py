#!/usr/bin/env python3
"""
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ GoodRobot
–ï–¥–∏–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è, –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
"""

import argparse
import asyncio
import os
import random
import sys

from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import sessionmaker

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from admin.app.auth import get_password_hash
from app.models.user import User


class AdminManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏"""

    def __init__(self, docker_mode: bool = False):
        self.docker_mode = docker_mode
        if docker_mode:
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
            self.database_url = "postgresql+asyncpg://masterbot:masterbot@postgres:5432/masterbot"
        else:
            # –õ–æ–∫–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
            self.database_url = "postgresql+asyncpg://masterbot:masterbot@localhost:5432/masterbot"

        self.engine = create_async_engine(self.database_url)
        self.SessionFactory = sessionmaker(self.engine, class_=AsyncSession, expire_on_commit=False)

    async def create_admin_user(self, username: str, password: str, email: str | None = None,
                               name: str | None = None) -> bool:
        """–°–æ–∑–¥–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        async with self.SessionFactory() as session:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
                query = select(User).where(User.username == username)
                result = await session.execute(query)
                existing_user = result.scalar_one_or_none()

                if existing_user:
                    print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º '{username}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                    return False

                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                hashed_password = get_password_hash(password)
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π tg_id, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –±—É–¥–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
                random_tg_id = random.randint(1_000_000_000, 9_999_999_999)

                new_admin = User(
                    username=username,
                    hashed_password=hashed_password,
                    email=email or f"{username}@example.com",
                    role="admin",
                    tg_id=random_tg_id,  # –°–ª—É—á–∞–π–Ω—ã–π tg_id –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                    name=name or username,
                    is_active=True
                )

                session.add(new_admin)
                await session.commit()
                await session.refresh(new_admin)

                print(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä '{username}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
                print(f"   ID: {new_admin.id}")
                print(f"   Email: {new_admin.email}")
                print(f"   –ò–º—è: {new_admin.name}")
                return True

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
                return False

    async def list_admins(self) -> list[dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
        async with self.SessionFactory() as session:
            try:
                query = select(User).filter(User.role == "admin").order_by(User.id)
                result = await session.execute(query)
                admins = result.scalars().all()

                admin_list = []
                for admin in admins:
                    admin_list.append({
                        "id": admin.id,
                        "username": admin.username,
                        "name": admin.name,
                        "email": admin.email,
                        "is_active": admin.is_active,
                        "created_at": getattr(admin, 'created_at', None)
                    })

                return admin_list

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
                return []

    async def get_admin_by_username(self, username: str) -> dict | None:
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ username"""
        async with self.SessionFactory() as session:
            try:
                query = select(User).filter(User.role == "admin", User.username == username)
                result = await session.execute(query)
                admin = result.scalar_one_or_none()

                if admin:
                    return {
                        "id": admin.id,
                        "username": admin.username,
                        "name": admin.name,
                        "email": admin.email,
                        "is_active": admin.is_active,
                        "created_at": getattr(admin, 'created_at', None)
                    }
                return None

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
                return None

    async def update_admin_password(self, username: str, new_password: str) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        async with self.SessionFactory() as session:
            try:
                query = select(User).filter(User.role == "admin", User.username == username)
                result = await session.execute(query)
                admin = result.scalar_one_or_none()

                if not admin:
                    print(f"‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä '{username}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                    return False

                admin.hashed_password = get_password_hash(new_password)
                await session.commit()

                print(f"‚úÖ –ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ '{username}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
                return True

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è: {e}")
                return False

    async def toggle_admin_status(self, username: str) -> bool:
        """–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        async with self.SessionFactory() as session:
            try:
                query = select(User).filter(User.role == "admin", User.username == username)
                result = await session.execute(query)
                admin = result.scalar_one_or_none()

                if not admin:
                    print(f"‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä '{username}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                    return False

                admin.is_active = not admin.is_active
                await session.commit()

                status = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" if admin.is_active else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
                print(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä '{username}' {status}!")
                return True

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
                return False


def print_admin_table(admins: list[dict]):
    """–í—ã–≤–æ–¥–∏—Ç —Ç–∞–±–ª–∏—Ü—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    if not admins:
        print("üìù –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    print("\nüìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:")
    print("-" * 80)
    print(f"{'ID':<5} {'Username':<15} {'Name':<15} {'Email':<25} {'Status':<10}")
    print("-" * 80)

    for admin in admins:
        status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if admin["is_active"] else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
        print(f"{admin['id']:<5} {admin['username']:<15} {admin['name']:<15} {admin['email']:<25} {status:<10}")

    print("-" * 80)
    print(f"–í—Å–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {len(admins)}")


async def main():
    parser = argparse.ArgumentParser(description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ GoodRobot")
    parser.add_argument("--docker", action="store_true", help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Docker –ë–î")
    parser.add_argument("--list", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")

    subparsers = parser.add_subparsers(dest="command", help="–ö–æ–º–∞–Ω–¥—ã")

    # –ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    create_parser = subparsers.add_parser("create", help="–°–æ–∑–¥–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    create_parser.add_argument("username", help="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    create_parser.add_argument("password", help="–ü–∞—Ä–æ–ª—å")
    create_parser.add_argument("--email", help="Email (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
    create_parser.add_argument("--name", help="–ü–æ–ª–Ω–æ–µ –∏–º—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")

    # –ö–æ–º–∞–Ω–¥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
    password_parser = subparsers.add_parser("password", help="–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    password_parser.add_argument("username", help="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    password_parser.add_argument("new_password", help="–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å")

    # –ö–æ–º–∞–Ω–¥–∞ –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    toggle_parser = subparsers.add_parser("toggle", help="–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    toggle_parser.add_argument("username", help="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    # –ö–æ–º–∞–Ω–¥–∞ –ø–æ–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    find_parser = subparsers.add_parser("find", help="–ù–∞–π—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    find_parser.add_argument("username", help="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    args = parser.parse_args()

    manager = AdminManager(docker_mode=args.docker)

    if args.list:
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admins = await manager.list_admins()
        print_admin_table(admins)

    elif args.command == "create":
        # –°–æ–∑–¥–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        success = await manager.create_admin_user(
            username=args.username,
            password=args.password,
            email=args.email,
            name=args.name
        )

        if success:
            print("\nüîë –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:")
            print("   URL: http://localhost:8000/login")
            print(f"   –õ–æ–≥–∏–Ω: {args.username}")
            print(f"   –ü–∞—Ä–æ–ª—å: {args.password}")

    elif args.command == "password":
        # –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å
        await manager.update_admin_password(args.username, args.new_password)

    elif args.command == "toggle":
        # –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await manager.toggle_admin_status(args.username)

    elif args.command == "find":
        # –ù–∞–π—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin = await manager.get_admin_by_username(args.username)
        if admin:
            print("‚úÖ –ù–∞–π–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:")
            print(f"   ID: {admin['id']}")
            print(f"   Username: {admin['username']}")
            print(f"   Name: {admin['name']}")
            print(f"   Email: {admin['email']}")
            print(f"   Status: {'–ê–∫—Ç–∏–≤–µ–Ω' if admin['is_active'] else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}")
        else:
            print(f"‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä '{args.username}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–∑–¥–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ superadmin
        print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...")
        success = await manager.create_admin_user("superadmin", "admin123")
        if success:
            print("\nüîë –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:")
            print("   URL: http://localhost:8000/login")
            print("   –õ–æ–≥–∏–Ω: superadmin")
            print("   –ü–∞—Ä–æ–ª—å: admin123")


if __name__ == "__main__":
    asyncio.run(main())
