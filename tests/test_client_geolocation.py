import pytest
from unittest.mock import AsyncMock, patch, MagicMock
from aiogram.types import Message, User, Location, ReplyKeyboardMarkup
from aiogram.fsm.context import FSMContext
from app.bot.handlers.client import create_address, create_location, skip_location, handle_location_button_text
from app.bot.states import OrderCreate


@pytest.fixture
def message():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    msg = AsyncMock(spec=Message)
    msg.from_user = AsyncMock()
    msg.from_user.id = 123456789
    msg.from_user.is_bot = False
    msg.from_user.first_name = "Test"
    # –î–æ–±–∞–≤–ª—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ answer
    msg.answer = AsyncMock()
    return msg


@pytest.fixture
def state():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM"""
    state_mock = AsyncMock(spec=FSMContext)
    state_mock.get_data.return_value = {
        "category": "–≠–ª–µ–∫—Ç—Ä–∏–∫–∞",
        "zone": "–ê–ª–º–∞–ª–∏–Ω—Å–∫–∏–π",
        "address": "—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 123"
    }
    return state_mock


@pytest.mark.asyncio
async def test_create_address_handler(message, state):
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞"""
    message.text = "—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 123"
    
    # –ú–æ–∫–∞–µ–º –ª–æ–≥–≥–µ—Ä, ReplyKeyboardMarkup –∏ KeyboardButton
    keyboard_button_mock = MagicMock()
    with patch('app.bot.handlers.client.logger', MagicMock()), \
         patch('app.bot.handlers.client.ReplyKeyboardMarkup', return_value=MagicMock()), \
         patch('app.bot.handlers.client.KeyboardButton', keyboard_button_mock):
        await create_address(message, state)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–¥—Ä–µ—Å –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    state.update_data.assert_called_once_with(address=message.text)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    message.answer.assert_called()
    args, kwargs = message.answer.call_args
    assert "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é" in args[0]
    assert 'reply_markup' in kwargs
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ KeyboardButton —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º request_location=True
    keyboard_button_mock.assert_any_call(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ OrderCreate.location
    state.set_state.assert_called_once_with(OrderCreate.location)


@pytest.mark.asyncio
async def test_create_location_handler_with_location(message, state):
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    location_mock = AsyncMock()
    location_mock.latitude = 43.238949
    location_mock.longitude = 76.889709
    message.location = location_mock
    
    # –ú–æ–∫–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    with patch('app.bot.keyboards.media_keyboard', return_value=MagicMock()):
        await create_location(message, state)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    state.update_data.assert_called_once_with(
        latitude=str(message.location.latitude),
        longitude=str(message.location.longitude)
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    message.answer.assert_called()
    args, kwargs = message.answer.call_args
    assert "–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞" in args[0]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ OrderCreate.media
    state.set_state.assert_called_once_with(OrderCreate.media)


@pytest.mark.asyncio
async def test_create_location_handler_without_location(message, state):
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    message.location = None
    
    # –ú–æ–∫–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    with patch('app.bot.keyboards.media_keyboard', return_value=MagicMock()):
        await create_location(message, state)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
    message.answer.assert_called()
    args, kwargs = message.answer.call_args
    assert "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é" in args[0]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ OrderCreate.media
    state.set_state.assert_called_once_with(OrderCreate.media)


@pytest.mark.asyncio
async def test_skip_location_handler(message, state):
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    # –ú–æ–∫–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –ª–æ–≥–≥–µ—Ä
    with patch('app.bot.keyboards.media_keyboard', return_value=MagicMock()), \
         patch('app.bot.handlers.client.logger'):
        await skip_location(message, state)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–ø—É—Å–∫–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    message.answer.assert_called()
    args, kwargs = message.answer.call_args
    assert "–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞" in args[0]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ OrderCreate.media
    state.set_state.assert_called_once_with(OrderCreate.media)


@pytest.mark.asyncio
async def test_handle_location_button_text(message, state):
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    # –ú–æ–∫–∞–µ–º –ª–æ–≥–≥–µ—Ä –∏ ReplyKeyboardMarkup
    keyboard_button_mock = MagicMock()
    with patch('app.bot.handlers.client.logger', MagicMock()), \
         patch('app.bot.handlers.client.ReplyKeyboardMarkup', return_value=MagicMock()), \
         patch('app.bot.handlers.client.KeyboardButton', keyboard_button_mock):
        await handle_location_button_text(message, state)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    message.answer.assert_called()
    args, kwargs = message.answer.call_args
    assert "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É" in args[0]
    assert "–ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–∞—à–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º" in args[0]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –æ—Ç–≤–µ—Ç–µ
    assert 'reply_markup' in kwargs
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤ KeyboardButton —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º request_location=True
    keyboard_button_mock.assert_any_call(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)


# –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç save_order, —Ç–∞–∫ –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏—è —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω–∞—è –¥–ª—è –º–æ–∫–∏–Ω–≥–∞
