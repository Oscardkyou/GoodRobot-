"""
–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–∞–º–∏.
"""
import streamlit as st
import pandas as pd
import sys
import os
import json
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '../..')))

from admin_streamlit.utils.auth import check_auth
from admin_streamlit.utils.db import (
    execute_query, execute_action, get_session, 
    insert_record, update_record, delete_record, get_record_by_id
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ú–∞—Å—Ç–µ—Ä–∞ | GoodRobot Admin",
    page_icon="ü§ñ",
    layout="wide",
)

# –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
if not check_auth():
    st.stop()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_all_masters():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤
    """
    return execute_query("""
        SELECT m.id, m.telegram_id, m.name, m.phone, m.rating, m.created_at,
               COUNT(DISTINCT ms.specialty_id) as specialties_count,
               COUNT(DISTINCT o.id) as orders_count
        FROM masters m
        LEFT JOIN master_specialties ms ON m.id = ms.master_id
        LEFT JOIN orders o ON m.id = o.master_id
        GROUP BY m.id, m.telegram_id, m.name, m.phone, m.rating, m.created_at
        ORDER BY m.id
    """)

def get_master_details(master_id):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Å—Ç–µ—Ä–µ
    """
    master_data = get_record_by_id("masters", "id", master_id)
    if master_data.empty:
        return None
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π –º–∞—Å—Ç–µ—Ä–∞
    specialties = execute_query("""
        SELECT s.id, s.name
        FROM specialties s
        JOIN master_specialties ms ON s.id = ms.specialty_id
        WHERE ms.master_id = :master_id
        ORDER BY s.name
    """, {"master_id": master_id})
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –º–∞—Å—Ç–µ—Ä–∞
    orders = execute_query("""
        SELECT o.id, o.created_at, o.status, o.price,
               c.name as client_name, s.name as specialty_name
        FROM orders o
        LEFT JOIN clients c ON o.client_id = c.id
        LEFT JOIN specialties s ON o.specialty_id = s.id
        WHERE o.master_id = :master_id
        ORDER BY o.created_at DESC
        LIMIT 10
    """, {"master_id": master_id})
    
    return {
        "master": master_data.iloc[0].to_dict(),
        "specialties": specialties,
        "orders": orders
    }

def get_all_specialties():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π
    """
    return execute_query("""
        SELECT id, name, description
        FROM specialties
        ORDER BY name
    """)

def get_master_specialties(master_id):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ ID —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π –º–∞—Å—Ç–µ—Ä–∞
    """
    specialties = execute_query("""
        SELECT specialty_id
        FROM master_specialties
        WHERE master_id = :master_id
    """, {"master_id": master_id})
    
    return specialties['specialty_id'].tolist() if not specialties.empty else []

def update_master_specialties(master_id, specialty_ids):
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π –º–∞—Å—Ç–µ—Ä–∞
    """
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–µ–∫—É—â–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
    delete_success = delete_record("master_specialties", "master_id = :master_id", {"master_id": master_id})
    
    if not delete_success:
        return False
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
    all_success = True
    for specialty_id in specialty_ids:
        success = insert_record("master_specialties", {
            "master_id": master_id,
            "specialty_id": specialty_id
        })
        if not success:
            all_success = False
    
    return all_success

def create_new_master(data):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
    """
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
    data['created_at'] = datetime.now().isoformat()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ —É–¥–∞–ª—è–µ–º –∏—Ö –∏–∑ –¥–∞–Ω–Ω—ã—Ö
    specialties = data.pop('specialties', [])
    
    # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞
    success = insert_record("masters", data)
    
    if not success:
        return False
    
    # –ü–æ–ª—É—á–∞–µ–º ID –Ω–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
    new_master = execute_query("""
        SELECT id FROM masters
        WHERE telegram_id = :telegram_id
        ORDER BY created_at DESC
        LIMIT 1
    """, {"telegram_id": data['telegram_id']})
    
    if new_master.empty:
        return False
    
    master_id = new_master.iloc[0]['id']
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
    if specialties:
        update_master_specialties(master_id, specialties)
    
    return True

def update_existing_master(master_id, data):
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ —É–¥–∞–ª—è–µ–º –∏—Ö –∏–∑ –¥–∞–Ω–Ω—ã—Ö
    specialties = data.pop('specialties', None)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Ç–µ—Ä–∞
    success = update_record("masters", data, f"id = {master_id}")
    
    if not success:
        return False
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
    if specialties is not None:
        update_master_specialties(master_id, specialties)
    
    return True

st.title("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞–º–∏")

# –í–∫–ª–∞–¥–∫–∏
tab1, tab2 = st.tabs(["–°–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤", "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞"])

# –í–∫–ª–∞–¥–∫–∞ "–°–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤"
with tab1:
    # –§–∏–ª—å—Ç—Ä—ã
    st.subheader("–§–∏–ª—å—Ç—Ä—ã")
    col1, col2 = st.columns(2)
    
    with col1:
        name_filter = st.text_input("–ò–º—è –º–∞—Å—Ç–µ—Ä–∞")
    
    with col2:
        specialty_filter = st.selectbox(
            "–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å",
            options=["–í—Å–µ"] + list(get_all_specialties()["name"]),
            index=0
        )
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
    if specialty_filter == "–í—Å–µ" and not name_filter:
        # –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        masters_df = get_all_masters()
    else:
        # –° —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        query = """
            SELECT m.id, m.telegram_id, m.name, m.phone, m.rating, m.created_at,
                   COUNT(DISTINCT ms.specialty_id) as specialties_count,
                   COUNT(DISTINCT o.id) as orders_count
            FROM masters m
            LEFT JOIN master_specialties ms ON m.id = ms.master_id
            LEFT JOIN specialties s ON ms.specialty_id = s.id
            LEFT JOIN orders o ON m.id = o.master_id
        """
        
        where_clauses = []
        params = {}
        
        if name_filter:
            where_clauses.append("m.name LIKE :name")
            params["name"] = f"%{name_filter}%"
        
        if specialty_filter != "–í—Å–µ":
            where_clauses.append("s.name = :specialty")
            params["specialty"] = specialty_filter
        
        if where_clauses:
            query += " WHERE " + " AND ".join(where_clauses)
        
        query += """
            GROUP BY m.id, m.telegram_id, m.name, m.phone, m.rating, m.created_at
            ORDER BY m.id
        """
        
        masters_df = execute_query(query, params)
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –º–∞—Å—Ç–µ—Ä–æ–≤
    st.subheader("–°–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤")
    
    if not masters_df.empty:
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
        if 'created_at' in masters_df.columns:
            masters_df['created_at'] = pd.to_datetime(masters_df['created_at']).dt.strftime('%Y-%m-%d %H:%M')
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        display_df = masters_df.rename(columns={
            'id': 'ID',
            'telegram_id': 'Telegram ID',
            'name': '–ò–º—è',
            'phone': '–¢–µ–ª–µ—Ñ–æ–Ω',
            'rating': '–†–µ–π—Ç–∏–Ω–≥',
            'created_at': '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è',
            'specialties_count': '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏',
            'orders_count': '–ó–∞–∫–∞–∑—ã'
        })
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        st.dataframe(display_df, use_container_width=True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–¥ —Ç–∞–±–ª–∏—Ü–µ–π
        st.write("–î–µ–π—Å—Ç–≤–∏—è —Å –º–∞—Å—Ç–µ—Ä–∞–º–∏:")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            master_id_view = st.number_input("–í—ã–±–µ—Ä–∏—Ç–µ ID –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞", min_value=1, step=1)
            if st.button("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å"):
                st.session_state.master_id = master_id_view
                st.session_state.master_action = "view"
                st.experimental_rerun()
        
        with col2:
            master_id_edit = st.number_input("–í—ã–±–µ—Ä–∏—Ç–µ ID –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", min_value=1, step=1)
            if st.button("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"):
                st.session_state.master_id = master_id_edit
                st.session_state.master_action = "edit"
                st.experimental_rerun()
        
        with col3:
            master_id_delete = st.number_input("–í—ã–±–µ—Ä–∏—Ç–µ ID –º–∞—Å—Ç–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", min_value=1, step=1)
            if st.button("–£–¥–∞–ª–∏—Ç—å", type="primary", use_container_width=True):
                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
                st.session_state.master_id = master_id_delete
                st.session_state.master_action = "delete"
                st.experimental_rerun()
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
        st.write("""
        ---
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞:
        """)
        if st.button("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞", use_container_width=True):
            st.session_state.master_action = "new"
            st.experimental_rerun()
    else:
        st.info("–ú–∞—Å—Ç–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

# –í–∫–ª–∞–¥–∫–∞ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞"
with tab2:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Å–µ—Å—Å–∏–∏
    if 'master_action' in st.session_state and 'master_id' in st.session_state:
        action = st.session_state.master_action
        master_id = st.session_state.master_id
        
        # –î–µ–π—Å—Ç–≤–∏–µ "–ü—Ä–æ—Å–º–æ—Ç—Ä"
        if action == "view":
            master_details = get_master_details(master_id)
            if master_details:
                st.subheader(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Å—Ç–µ—Ä–µ: {master_details['master']['name']}")
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.write("### –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
                    st.write(f"**ID:** {master_details['master']['id']}")
                    st.write(f"**Telegram ID:** {master_details['master']['telegram_id']}")
                    st.write(f"**–ò–º—è:** {master_details['master']['name']}")
                    st.write(f"**–¢–µ–ª–µ—Ñ–æ–Ω:** {master_details['master']['phone']}")
                    st.write(f"**–†–µ–π—Ç–∏–Ω–≥:** {master_details['master']['rating']}")
                    
                    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    if st.button("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å—Ç–µ—Ä–∞"):
                        st.session_state.master_action = "edit"
                        st.experimental_rerun()
                
                with col2:
                    st.write("### –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏")
                    if not master_details['specialties'].empty:
                        for _, specialty in master_details['specialties'].iterrows():
                            st.write(f"- {specialty['name']}")
                    else:
                        st.info("–£ –º–∞—Å—Ç–µ—Ä–∞ –Ω–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π")
                
                st.write("### –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã")
                if not master_details['orders'].empty:
                    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
                    master_details['orders']['created_at'] = pd.to_datetime(master_details['orders']['created_at']).dt.strftime('%Y-%m-%d %H:%M')
                    
                    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    display_orders = master_details['orders'].rename(columns={
                        'id': 'ID',
                        'created_at': '–î–∞—Ç–∞',
                        'status': '–°—Ç–∞—Ç—É—Å',
                        'price': '–¶–µ–Ω–∞',
                        'client_name': '–ö–ª–∏–µ–Ω—Ç',
                        'specialty_name': '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å'
                    })
                    
                    st.dataframe(display_orders, use_container_width=True)
                else:
                    st.info("–£ –º–∞—Å—Ç–µ—Ä–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤")
                
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É
                if st.button("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É"):
                    del st.session_state.master_action
                    del st.session_state.master_id
                    st.experimental_rerun()
            else:
                st.error(f"–ú–∞—Å—Ç–µ—Ä —Å ID {master_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                if st.button("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É"):
                    del st.session_state.master_action
                    del st.session_state.master_id
                    st.experimental_rerun()
        
        # –î–µ–π—Å—Ç–≤–∏–µ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
        elif action == "edit":
            st.subheader(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ ID: {master_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞
            master_data = get_record_by_id("masters", "id", master_id)
            
            if not master_data.empty:
                master = master_data.iloc[0]
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –º–∞—Å—Ç–µ—Ä–∞
                master_specialties = get_master_specialties(master_id)
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
                all_specialties = get_all_specialties()
                
                with st.form("edit_master_form"):
                    name = st.text_input("–ò–º—è", value=master['name'])
                    telegram_id = st.number_input("Telegram ID", value=int(master['telegram_id']), min_value=1)
                    phone = st.text_input("–¢–µ–ª–µ—Ñ–æ–Ω", value=master['phone'] if pd.notna(master['phone']) else "")
                    rating = st.slider("–†–µ–π—Ç–∏–Ω–≥", min_value=0.0, max_value=5.0, value=float(master['rating']) if pd.notna(master['rating']) else 0.0, step=0.1)
                    
                    st.write("### –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏")
                    
                    # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π
                    specialty_options = {row['id']: row['name'] for _, row in all_specialties.iterrows()}
                    selected_specialties = st.multiselect(
                        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
                        options=list(specialty_options.keys()),
                        format_func=lambda x: specialty_options[x],
                        default=master_specialties
                    )
                    
                    submitted = st.form_submit_button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
                    
                    if submitted:
                        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                        update_data = {
                            "name": name,
                            "telegram_id": telegram_id,
                            "phone": phone,
                            "rating": rating,
                            "specialties": selected_specialties
                        }
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Ç–µ—Ä–∞
                        if update_existing_master(master_id, update_data):
                            st.success(f"–ú–∞—Å—Ç–µ—Ä {name} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
                            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–µ–∂–∏–º—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                            st.session_state.master_action = "view"
                            st.experimental_rerun()
                        else:
                            st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä–∞")
                
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É
                if st.button("–û—Ç–º–µ–Ω–∞"):
                    del st.session_state.master_action
                    del st.session_state.master_id
                    st.experimental_rerun()
            else:
                st.error(f"–ú–∞—Å—Ç–µ—Ä —Å ID {master_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                if st.button("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É"):
                    del st.session_state.master_action
                    del st.session_state.master_id
                    st.experimental_rerun()
        
        # –î–µ–π—Å—Ç–≤–∏–µ "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ"
        elif action == "new":
            st.subheader("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
            all_specialties = get_all_specialties()
            
            with st.form("add_master_form"):
                name = st.text_input("–ò–º—è")
                telegram_id = st.number_input("Telegram ID", min_value=1)
                phone = st.text_input("–¢–µ–ª–µ—Ñ–æ–Ω")
                rating = st.slider("–†–µ–π—Ç–∏–Ω–≥", min_value=0.0, max_value=5.0, value=0.0, step=0.1)
                
                st.write("### –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏")
                
                # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π
                specialty_options = {row['id']: row['name'] for _, row in all_specialties.iterrows()}
                selected_specialties = st.multiselect(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
                    options=list(specialty_options.keys()),
                    format_func=lambda x: specialty_options[x]
                )
                
                submitted = st.form_submit_button("–°–æ–∑–¥–∞—Ç—å")
                
                if submitted:
                    if not name or not telegram_id:
                        st.error("–ò–º—è –∏ Telegram ID –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è")
                    else:
                        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
                        new_master_data = {
                            "name": name,
                            "telegram_id": telegram_id,
                            "phone": phone if phone else None,
                            "rating": rating,
                            "specialties": selected_specialties
                        }
                        
                        # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞
                        if create_new_master(new_master_data):
                            st.success(f"–ú–∞—Å—Ç–µ—Ä {name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
                            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É
                            del st.session_state.master_action
                            if 'master_id' in st.session_state:
                                del st.session_state.master_id
                            st.experimental_rerun()
                        else:
                            st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä–∞")
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É
            if st.button("–û—Ç–º–µ–Ω–∞"):
                del st.session_state.master_action
                if 'master_id' in st.session_state:
                    del st.session_state.master_id
                st.experimental_rerun()
        
        # –î–µ–π—Å—Ç–≤–∏–µ "–£–¥–∞–ª–µ–Ω–∏–µ"
        elif action == "delete":
            st.subheader(f"–£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞ ID: {master_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞
            master_data = get_record_by_id("masters", "id", master_id)
            
            if not master_data.empty:
                master = master_data.iloc[0]
                
                st.warning(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞ {master['name']} (ID: {master_id})?")
                
                col1, col2 = st.columns(2)
                
                with col1:
                    if st.button("–î–∞, —É–¥–∞–ª–∏—Ç—å", type="primary"):
                        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏ —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º–∏
                        delete_record("master_specialties", "master_id = :master_id", {"master_id": master_id})
                        
                        # –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º —Å–∞–º–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
                        if delete_record("masters", "id = :id", {"id": master_id}):
                            st.success(f"–ú–∞—Å—Ç–µ—Ä {master['name']} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
                            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É
                            del st.session_state.master_action
                            del st.session_state.master_id
                            st.experimental_rerun()
                        else:
                            st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä–∞")
                
                with col2:
                    if st.button("–û—Ç–º–µ–Ω–∞", use_container_width=True):
                        del st.session_state.master_action
                        del st.session_state.master_id
                        st.experimental_rerun()
            else:
                st.error(f"–ú–∞—Å—Ç–µ—Ä —Å ID {master_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                if st.button("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É"):
                    del st.session_state.master_action
                    del st.session_state.master_id
                    st.experimental_rerun()
    else:
        st.info("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞.")
