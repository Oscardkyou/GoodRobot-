"""
–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.
"""
import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '../..')))

from admin_streamlit.utils.auth import check_auth
from admin_streamlit.utils.db import execute_query

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ | GoodRobot Admin",
    page_icon="ü§ñ",
    layout="wide",
)

# –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
if not check_auth():
    st.stop()

st.title("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞")

# –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞
st.sidebar.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
date_range = st.sidebar.date_input(
    "–ü–µ—Ä–∏–æ–¥",
    value=(datetime.now() - timedelta(days=30), datetime.now()),
    max_value=datetime.now()
)

if len(date_range) == 2:
    start_date, end_date = date_range
    date_filter = {
        "start_date": start_date.strftime('%Y-%m-%d'),
        "end_date": end_date.strftime('%Y-%m-%d')
    }
else:
    date_filter = {
        "start_date": (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d'),
        "end_date": datetime.now().strftime('%Y-%m-%d')
    }

# –£—Ç–∏–ª–∏—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Å–∫–∞–ª—è—Ä–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
def scalar_query(query: str, params: dict | None, column: str, default=0):
    try:
        df = execute_query(query, params) if params is not None else execute_query(query)
        if df.empty or column not in df.columns:
            return default
        val = df.iloc[0][column]
        if pd.isna(val):
            return default
        return val
    except Exception:
        return default

# –í–∫–ª–∞–¥–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
tab1, tab2, tab3, tab4 = st.tabs(["–ó–∞–∫–∞–∑—ã", "–ú–∞—Å—Ç–µ—Ä–∞", "–ö–ª–∏–µ–Ω—Ç—ã", "–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"])

# –í–∫–ª–∞–¥–∫–∞ "–ó–∞–∫–∞–∑—ã"
with tab1:
    st.header("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤")
    
    # –ú–µ—Ç—Ä–∏–∫–∏ –∑–∞–∫–∞–∑–æ–≤
    col1, col2, col3, col4 = st.columns(4)
    
    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
    total_orders = scalar_query(
        """
        SELECT COUNT(*) as count
        FROM orders
        WHERE DATE(created_at) BETWEEN :start_date AND :end_date
        """,
        date_filter,
        'count', 0
    )
    
    col1.metric("–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤", total_orders)
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    completed_orders = scalar_query(
        """
        SELECT COUNT(*) as count
        FROM orders
        WHERE status = 'completed' AND DATE(created_at) BETWEEN :start_date AND :end_date
        """,
        date_filter,
        'count', 0
    )
    
    col2.metric("–ó–∞–≤–µ—Ä—à–µ–Ω–æ", completed_orders)
    
    # –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    cancelled_orders = scalar_query(
        """
        SELECT COUNT(*) as count
        FROM orders
        WHERE status = 'cancelled' AND DATE(created_at) BETWEEN :start_date AND :end_date
        """,
        date_filter,
        'count', 0
    )
    
    col3.metric("–û—Ç–º–µ–Ω–µ–Ω–æ", cancelled_orders)
    
    # –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞
    avg_price = scalar_query(
        """
        SELECT AVG(price) as avg_price
        FROM orders
        WHERE DATE(created_at) BETWEEN :start_date AND :end_date
        """,
        date_filter,
        'avg_price', 0
    )
    col4.metric("–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", f"{int(avg_price)} —Ä—É–±.")
    
    # –ì—Ä–∞—Ñ–∏–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –¥–Ω—è–º
    orders_by_day = execute_query(
        """
        SELECT DATE(created_at) as date, COUNT(*) as count 
        FROM orders 
        WHERE DATE(created_at) BETWEEN :start_date AND :end_date
        GROUP BY DATE(created_at)
        ORDER BY date
        """,
        date_filter
    )
    
    if not orders_by_day.empty:
        st.subheader("–î–∏–Ω–∞–º–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤")
        fig = px.line(
            orders_by_day, 
            x='date', 
            y='count',
            title='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –¥–Ω—è–º',
            labels={'date': '–î–∞—Ç–∞', 'count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤'}
        )
        st.plotly_chart(fig, use_container_width=True)
    
    # –ì—Ä–∞—Ñ–∏–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    orders_by_status = execute_query(
        """
        SELECT status, COUNT(*) as count 
        FROM orders 
        WHERE DATE(created_at) BETWEEN :start_date AND :end_date
        GROUP BY status
        ORDER BY count DESC
        """,
        date_filter
    )
    
    if not orders_by_status.empty:
        st.subheader("–ó–∞–∫–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º")
        fig = px.pie(
            orders_by_status, 
            values='count', 
            names='status',
            title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º',
            color='status',
            color_discrete_map={
                'new': '#ffeb3b',
                'in_progress': '#2196f3',
                'completed': '#4caf50',
                'cancelled': '#f44336'
            }
        )
        st.plotly_chart(fig, use_container_width=True)

# –í–∫–ª–∞–¥–∫–∞ "–ú–∞—Å—Ç–µ—Ä–∞"
with tab2:
    st.header("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤")
    
    # –ú–µ—Ç—Ä–∏–∫–∏ –º–∞—Å—Ç–µ—Ä–æ–≤
    col1, col2, col3 = st.columns(3)
    
    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Å—Ç–µ—Ä–æ–≤
    total_masters = scalar_query(
        """
        SELECT COUNT(*) as count
        FROM masters
        """,
        None,
        'count', 0
    )
    
    col1.metric("–í—Å–µ–≥–æ –º–∞—Å—Ç–µ—Ä–æ–≤", total_masters)
    
    # –ê–∫—Ç–∏–≤–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞ (–≤—ã–ø–æ–ª–Ω–∏–≤—à–∏–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∑–∞–∫–∞–∑ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥)
    active_masters = scalar_query(
        """
        SELECT COUNT(DISTINCT master_id) as count
        FROM orders
        WHERE master_id IS NOT NULL 
          AND status = 'completed'
          AND DATE(created_at) BETWEEN :start_date AND :end_date
        """,
        date_filter,
        'count', 0
    )
    
    col2.metric("–ê–∫—Ç–∏–≤–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞", active_masters)
    
    # –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –º–∞—Å—Ç–µ—Ä–æ–≤
    avg_rating = scalar_query(
        """
        SELECT AVG(rating) as avg_rating
        FROM masters
        """,
        None,
        'avg_rating', 0
    )
    col3.metric("–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥", f"{float(avg_rating):.1f}")
    
    # –¢–æ–ø –º–∞—Å—Ç–µ—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–∫–∞–∑–æ–≤
    top_masters = execute_query(
        """
        SELECT m.id, m.name, COUNT(o.id) as orders_count, AVG(o.price) as avg_price
        FROM masters m
        JOIN orders o ON m.id = o.master_id
        WHERE DATE(o.created_at) BETWEEN :start_date AND :end_date
          AND o.status = 'completed'
        GROUP BY m.id, m.name
        ORDER BY orders_count DESC
        LIMIT 10
        """,
        date_filter
    )
    
    if not top_masters.empty:
        st.subheader("–¢–æ–ø –º–∞—Å—Ç–µ—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–∫–∞–∑–æ–≤")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã
        top_masters['avg_price'] = top_masters['avg_price'].round(0).astype(int)
        
        fig = px.bar(
            top_masters, 
            x='name', 
            y='orders_count',
            title='–¢–æ–ø-10 –º–∞—Å—Ç–µ—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–∫–∞–∑–æ–≤',
            labels={'name': '–ú–∞—Å—Ç–µ—Ä', 'orders_count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤'},
            text='orders_count'
        )
        fig.update_traces(texttemplate='%{text}', textposition='outside')
        st.plotly_chart(fig, use_container_width=True)
        
        st.dataframe(
            top_masters.rename(columns={
                'name': '–ò–º—è', 
                'orders_count': '–ö–æ–ª-–≤–æ –∑–∞–∫–∞–∑–æ–≤', 
                'avg_price': '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ (—Ä—É–±.)'
            }),
            use_container_width=True
        )

# –í–∫–ª–∞–¥–∫–∞ "–ö–ª–∏–µ–Ω—Ç—ã"
with tab3:
    st.header("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤")
    
    # –ú–µ—Ç—Ä–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
    col1, col2, col3 = st.columns(3)
    
    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤
    total_clients = scalar_query(
        """
        SELECT COUNT(*) as count
        FROM clients
        """,
        None,
        'count', 0
    )
    
    col1.metric("–í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤", total_clients)
    
    # –ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
    new_clients = scalar_query(
        """
        SELECT COUNT(*) as count
        FROM clients
        WHERE DATE(created_at) BETWEEN :start_date AND :end_date
        """,
        date_filter,
        'count', 0
    )
    
    col2.metric("–ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã", new_clients)
    
    # –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã (—Å–¥–µ–ª–∞–≤—à–∏–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∑–∞–∫–∞–∑ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥)
    active_clients = scalar_query(
        """
        SELECT COUNT(DISTINCT client_id) as count
        FROM orders
        WHERE DATE(created_at) BETWEEN :start_date AND :end_date
        """,
        date_filter,
        'count', 0
    )
    
    col3.metric("–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã", active_clients)
    
    # –¢–æ–ø –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–∫–∞–∑–æ–≤
    top_clients = execute_query(
        """
        SELECT c.id, c.name, COUNT(o.id) as orders_count, SUM(o.price) as total_spent
        FROM clients c
        JOIN orders o ON c.id = o.client_id
        WHERE DATE(o.created_at) BETWEEN :start_date AND :end_date
        GROUP BY c.id, c.name
        ORDER BY orders_count DESC
        LIMIT 10
        """,
        date_filter
    )
    
    if not top_clients.empty:
        st.subheader("–¢–æ–ø –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–∫–∞–∑–æ–≤")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—â–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
        top_clients['total_spent'] = top_clients['total_spent'].round(0).astype(int)
        
        fig = px.bar(
            top_clients, 
            x='name', 
            y='orders_count',
            title='–¢–æ–ø-10 –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–∫–∞–∑–æ–≤',
            labels={'name': '–ö–ª–∏–µ–Ω—Ç', 'orders_count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤'},
            text='orders_count'
        )
        fig.update_traces(texttemplate='%{text}', textposition='outside')
        st.plotly_chart(fig, use_container_width=True)
        
        st.dataframe(
            top_clients.rename(columns={
                'name': '–ò–º—è', 
                'orders_count': '–ö–æ–ª-–≤–æ –∑–∞–∫–∞–∑–æ–≤', 
                'total_spent': '–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã (—Ä—É–±.)'
            }),
            use_container_width=True
        )

# –í–∫–ª–∞–¥–∫–∞ "–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"
with tab4:
    st.header("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π")
    
    # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
    popular_specialties = execute_query(
        """
        SELECT s.id, s.name, COUNT(o.id) as orders_count, AVG(o.price) as avg_price
        FROM specialties s
        JOIN orders o ON s.id = o.specialty_id
        WHERE DATE(o.created_at) BETWEEN :start_date AND :end_date
        GROUP BY s.id, s.name
        ORDER BY orders_count DESC
        """,
        date_filter
    )
    
    if not popular_specialties.empty:
        st.subheader("–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã
        popular_specialties['avg_price'] = popular_specialties['avg_price'].round(0).astype(int)
        
        fig = px.bar(
            popular_specialties.head(10), 
            x='name', 
            y='orders_count',
            title='–¢–æ–ø-10 —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–∫–∞–∑–æ–≤',
            labels={'name': '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å', 'orders_count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤'},
            text='orders_count'
        )
        fig.update_traces(texttemplate='%{text}', textposition='outside')
        st.plotly_chart(fig, use_container_width=True)
        
        # –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–µ–¥–Ω–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º
        fig = px.bar(
            popular_specialties.head(10), 
            x='name', 
            y='avg_price',
            title='–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º',
            labels={'name': '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å', 'avg_price': '–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ä—É–±.)'},
            text='avg_price'
        )
        fig.update_traces(texttemplate='%{text}', textposition='outside')
        st.plotly_chart(fig, use_container_width=True)
        
        st.dataframe(
            popular_specialties.rename(columns={
                'name': '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å', 
                'orders_count': '–ö–æ–ª-–≤–æ –∑–∞–∫–∞–∑–æ–≤', 
                'avg_price': '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ (—Ä—É–±.)'
            }),
            use_container_width=True
        )
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Å—Ç–µ—Ä–æ–≤ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º
    masters_by_specialty = execute_query(
        """
        SELECT s.id, s.name, COUNT(ms.master_id) as masters_count
        FROM specialties s
        LEFT JOIN master_specialties ms ON s.id = ms.specialty_id
        GROUP BY s.id, s.name
        ORDER BY masters_count DESC
        """
    )
    
    if not masters_by_specialty.empty:
        st.subheader("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Å—Ç–µ—Ä–æ–≤ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º")
        
        fig = px.bar(
            masters_by_specialty.head(10), 
            x='name', 
            y='masters_count',
            title='–¢–æ–ø-10 —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–∞—Å—Ç–µ—Ä–æ–≤',
            labels={'name': '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å', 'masters_count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Å—Ç–µ—Ä–æ–≤'},
            text='masters_count'
        )
        fig.update_traces(texttemplate='%{text}', textposition='outside')
        st.plotly_chart(fig, use_container_width=True)
