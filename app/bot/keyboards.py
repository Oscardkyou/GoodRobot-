"""Inline keyboards for bot flows."""
from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup,
)


def add_back_button(keyboard: InlineKeyboardMarkup, callback_data: str = "back") -> InlineKeyboardMarkup:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥' –∫ –ª—é–±–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ."""
    keyboard_dict = keyboard.model_dump()
    keyboard_dict['inline_keyboard'].append([InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data=callback_data)])
    return InlineKeyboardMarkup.model_validate(keyboard_dict)


def role_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [
            InlineKeyboardButton(text="–Ø –∫–ª–∏–µ–Ω—Ç", callback_data="role:client"),
            InlineKeyboardButton(text="–Ø –º–∞—Å—Ç–µ—Ä", callback_data="role:master"),
        ],
        [InlineKeyboardButton(text="–Ø –ø–∞—Ä—Ç–Ω—ë—Ä", callback_data="role:partner")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


CATEGORIES = [
    "–≠–ª–µ–∫—Ç—Ä–∏–∫–∞",
    "–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞",
    "–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞",
    "–ö–ª–∏–Ω–∏–Ω–≥",
    "–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã",
]


def categories_keyboard(with_back: bool = True) -> InlineKeyboardMarkup:
    rows = []
    row = []
    for i, name in enumerate(CATEGORIES, start=1):
        row.append(InlineKeyboardButton(text=name, callback_data=f"category:{name}"))
        if i % 2 == 0:
            rows.append(row)
            row = []
    if row:
        rows.append(row)
    keyboard = InlineKeyboardMarkup(inline_keyboard=rows)

    if with_back:
        return add_back_button(keyboard, "back:main")
    return keyboard


# –†–∞–π–æ–Ω—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã


# –†–∞–π–æ–Ω—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã


# –†–∞–π–æ–Ω—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã


# –†–∞–π–æ–Ω—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã


def confirm_keyboard(with_back: bool = False) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm:yes"),
                InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="confirm:no"),
            ]
        ]
    )

    if with_back:
        return add_back_button(keyboard, "back:confirm")
    return keyboard


def media_keyboard(with_back: bool = True) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —à–∞–≥–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ)."""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="media:done"),
                InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="media:skip"),
            ]
        ]
    )
    if with_back:
        return add_back_button(keyboard, "back:address")
    return keyboard


def main_menu_keyboard() -> ReplyKeyboardMarkup:
    """–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤."""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑"), KeyboardButton(text="üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")],
            [KeyboardButton(text="üìÇ –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"), KeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")],
            [KeyboardButton(text="üí¨ –°–æ–æ–±—â–µ–Ω–∏—è"), KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
            [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å"), KeyboardButton(text="ü§ñ –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫")],
        ],
        resize_keyboard=True
    )


def master_main_menu_keyboard() -> ReplyKeyboardMarkup:
    """–ú–µ–Ω—é –º–∞—Å—Ç–µ—Ä–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏."""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìã –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã"), KeyboardButton(text="üí∞ –ú–æ–∏ —Å—Ç–∞–≤–∫–∏")],
            [KeyboardButton(text="üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã"), KeyboardButton(text="üìç –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ")],
            [KeyboardButton(text="üîß –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"), KeyboardButton(text="üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")],
            [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
            [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")],
        ],
        resize_keyboard=True
    )


def partner_dashboard_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞."""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="partner:stats"),
                InlineKeyboardButton(text="üí∞ –í—ã–ø–ª–∞—Ç—ã", callback_data="partner:payouts"),
            ],
            [
                InlineKeyboardButton(text="üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", callback_data="partner:link"),
                InlineKeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="partner:referrals"),
            ],
        ]
    )
    return keyboard


def tracking_orders_keyboard(orders) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è."""
    buttons = []
    for order in orders:
        buttons.append([InlineKeyboardButton(
            text=f"–ó–∞–∫–∞–∑ #{order.id}: {order.category}",
            callback_data=f"track_order:{order.id}"
        )])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    buttons.append([InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="back:main")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def tracking_actions_keyboard(order_id) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞."""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏", callback_data=f"request_location:{order_id}")],
        [InlineKeyboardButton(text="üó∫Ô∏è –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ", callback_data=f"show_map:{order_id}")],
        [InlineKeyboardButton(text="üí¨ –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç", callback_data=f"open_chat:{order_id}")],
        [InlineKeyboardButton(text="üì± –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º", callback_data=f"contact_client:{order_id}")],
        [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º", callback_data="tracking:list")]
    ])


def location_update_request_keyboard(master_id) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏."""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìç –û–±–Ω–æ–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", callback_data=f"update_location:{master_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_location:{master_id}")]
    ])


def specialties_selection_keyboard(all_specs, selected_ids: set[int]) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π –º–∞—Å—Ç–µ—Ä–∞.

    Args:
        all_specs: Iterable[Specialty]-like objects with id and name fields.
        selected_ids: set of specialty IDs already chosen by the master.

    Returns:
        InlineKeyboardMarkup with toggle buttons and Done/Back.
    """
    rows = []
    row = []
    for i, s in enumerate(all_specs, start=1):
        checked = "‚úÖ " if s.id in selected_ids else ""
        row.append(InlineKeyboardButton(text=f"{checked}{s.name}", callback_data=f"mspec:toggle:{s.id}"))
        if i % 2 == 0:
            rows.append(row)
            row = []
    if row:
        rows.append(row)

    # Controls row
    rows.append([
        InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="mspec:done"),
        InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="back:main"),
    ])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def categories_selection_keyboard(categories: list[str], selected_categories: set[str]) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞.

    Args:
        categories: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
        selected_categories: –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.

    Returns:
        InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏-–ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
    """
    rows = []
    row = []
    for i, category in enumerate(categories, start=1):
        checked = "‚úÖ " if category in selected_categories else ""
        row.append(InlineKeyboardButton(
            text=f"{checked}{category}",
            callback_data=f"mcat:toggle:{category}"
        ))
        if i % 2 == 0:
            rows.append(row)
            row = []
    if row:
        rows.append(row)

    # Controls row
    rows.append([
        InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="mcat:done"),
        InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="back:main"),
    ])
    return InlineKeyboardMarkup(inline_keyboard=rows)
