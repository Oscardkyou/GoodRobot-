"""Handlers for –º–∞—Å—Ç–µ—Ä role: setup zones, create bids and track clients."""
import datetime
import logging

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)
from sqlalchemy import select

from app.bot.keyboards import (
    categories_selection_keyboard,
    master_main_menu_keyboard,
    role_keyboard,
    specialties_selection_keyboard,
    tracking_actions_keyboard,
    tracking_orders_keyboard,
)
from app.bot.states import (
    BidCreate,
    MasterCategorySetup,
    MasterSpecialtySetup,
)
from app.models import Bid, MasterCategory, Order, Specialty, User, master_categories, master_specialties
from core.db import SessionFactory

logger = logging.getLogger("bot.master")

router = Router()


@router.message(Command("help_master"))
async def cmd_help_master(message: Message) -> None:
    await message.answer(
        "–í—ã –º–∞—Å—Ç–µ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å."
    )


@router.message(Command("menu"))
async def cmd_menu(message: Message, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
    tg_id = message.from_user.id
    async with SessionFactory() as session:
        user = (await session.execute(select(User).where(User.tg_id == tg_id))).scalars().first()
        if not user or user.role != "master":
            return
    await state.clear()
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–∞—Å—Ç–µ—Ä–∞:",
        reply_markup=master_main_menu_keyboard()
    )


@router.message(F.text == "üìã –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã")
async def nearby_orders_button(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤."""
    tg_id = message.from_user.id

    async with SessionFactory() as session:
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞
        user = (await session.execute(select(User).where(User.tg_id == tg_id))).scalars().first()
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "new" –∏ "assigned"
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "new"
        new_orders_query = select(Order).where(
            Order.status == "new",
            # –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–∫–∞–∑—ã —Å–∞–º–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞, –µ—Å–ª–∏ –æ–Ω –≤–¥—Ä—É–≥ —Å–æ–∑–¥–∞–ª –∑–∞–∫–∞–∑ –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç
            Order.client_id != user.id
        ).order_by(Order.created_at.desc())

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "assigned", –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —ç—Ç–æ–º—É –º–∞—Å—Ç–µ—Ä—É
        assigned_orders_query = select(Order).where(
            Order.master_id == user.id,
            Order.status == "assigned"
        ).order_by(Order.created_at.desc())

        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–∞ –∑–∞–ø—Ä–æ—Å–∞
        new_orders = (await session.execute(new_orders_query)).scalars().all()
        assigned_orders = (await session.execute(assigned_orders_query)).scalars().all()

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–≤–∫–∏ –º–∞—Å—Ç–µ—Ä–∞, —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–∫–∞–∑—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω —É–∂–µ —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É
        bids = (await session.execute(
            select(Bid.order_id).where(Bid.master_id == user.id)
        )).scalars().all()

        bid_order_ids = set(bids)

        # Structured debug logging
        logger.info(
            "master_nearby_orders",
            extra={
                "user_id": tg_id,
                "chat_id": message.chat.id if message.chat else None,
                "new_found": len(new_orders),
                "assigned_found": len(assigned_orders),
                "bids_made": len(bid_order_ids),
            },
        )

    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–∫–∞–∑—ã, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –º–∞—Å—Ç–µ—Ä—É
    if assigned_orders:
        await message.answer("üü° –ó–∞–∫–∞–∑—ã –≤ —Ä–∞–±–æ—Ç–µ:")
        for order in assigned_orders[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 –∑–∞–∫–∞–∑–æ–≤
            order_text = (
                f"üì¶ –ó–∞–∫–∞–∑ #{order.id} (–í —Ä–∞–±–æ—Ç–µ)\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {order.category}\n"
                # –†–∞–π–æ–Ω—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ –º–æ–¥–µ–ª–∏
                f"–î–∞—Ç–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            )

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"view_order:{order.id}")],
                [InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"complete_order:{order.id}")]
            ])

            await message.answer(order_text, reply_markup=keyboard)

    # –ó–∞—Ç–µ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
    if new_orders:
        await message.answer("üîµ –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã:")
        for order in new_orders[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 –∑–∞–∫–∞–∑–æ–≤
            # –û—Ç–º–µ—á–∞–µ–º, —Å–¥–µ–ª–∞–ª –ª–∏ –º–∞—Å—Ç–µ—Ä —Å—Ç–∞–≤–∫—É –Ω–∞ —ç—Ç–æ—Ç –∑–∞–∫–∞–∑
            has_bid = order.id in bid_order_ids
            bid_status = "‚úì –°—Ç–∞–≤–∫–∞ —Å–¥–µ–ª–∞–Ω–∞" if has_bid else "–°—Ç–∞–≤–∫–∞ –Ω–µ —Å–¥–µ–ª–∞–Ω–∞"

            order_text = (
                f"üì¶ –ó–∞–∫–∞–∑ #{order.id}\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {order.category}\n"
                f"–°—Ç–∞—Ç—É—Å —Å—Ç–∞–≤–∫–∏: {bid_status}\n"
                f"–î–∞—Ç–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            )

            keyboard_buttons = [
                [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"view_order:{order.id}")]
            ]

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å—Ç–∞–≤–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–∞—Å—Ç–µ—Ä –µ—â–µ –Ω–µ –¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É
            if not has_bid:
                keyboard_buttons.append([InlineKeyboardButton(text="–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", callback_data=f"bid:{order.id}")])
            else:
                keyboard_buttons.append([InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É", callback_data=f"edit_bid_order:{order.id}")])

            keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            await message.answer(order_text, reply_markup=keyboard)

    # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –Ω–æ–≤—ã—Ö, –Ω–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    if not new_orders and not assigned_orders:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤, –∏ —É –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ.")


@router.callback_query(F.data.startswith("view_order:"))
async def view_order_details(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞."""
    try:
        order_id = int(callback.data.split(":", 1)[1])
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞", show_alert=True)
        return

    async with SessionFactory() as session:
        order = (
            await session.execute(select(Order).where(Order.id == order_id))
        ).scalars().first()

    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    text = (
        f"üì¶ –ó–∞–∫–∞–∑ #{order.id}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {order.category}\n"
        f"–ê–¥—Ä–µ—Å: {order.address or '‚Äî'}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {order.description or '‚Äî'}\n"
        f"–°—Ç–∞—Ç—É—Å: {order.status}\n"
        f"–î–∞—Ç–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", callback_data=f"bid:{order.id}")],
        [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="back:main")]
    ])

    try:
        await callback.message.edit_text(text, reply_markup=keyboard)
    except Exception:
        await callback.message.answer(text, reply_markup=keyboard)
    # –û—Ç–ø—Ä–∞–≤–∏–º –º–µ–¥–∏–∞ –≤–ª–æ–∂–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if order.media:
        for m in (order.media or [])[:10]:
            try:
                if isinstance(m, str) and m.startswith("photo:"):
                    await callback.message.answer_photo(m.split(":", 1)[1])
                elif isinstance(m, str) and m.startswith("video:"):
                    await callback.message.answer_video(m.split(":", 1)[1])
            except Exception:
                pass
    await callback.answer()


@router.message(F.text == "üí∞ –ú–æ–∏ —Å—Ç–∞–≤–∫–∏")
async def my_bids_button(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–∏—Ö —Å—Ç–∞–≤–æ–∫."""
    tg_id = message.from_user.id

    async with SessionFactory() as session:
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞
        user = (await session.execute(select(User).where(User.tg_id == tg_id))).scalars().first()
        if not user:
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–≤–∫–∏ –º–∞—Å—Ç–µ—Ä–∞
        bids_query = (
            select(Bid, Order)
            .join(Order, Bid.order_id == Order.id)
            .where(Bid.master_id == user.id)
            .order_by(Bid.created_at.desc())
        )

        result = await session.execute(bids_query)
        bids_with_orders = result.all()

    if not bids_with_orders:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞–≤–æ–∫. –ù–∞–π–¥–∏—Ç–µ –∑–∞–∫–∞–∑—ã –≤ —Ä–∞–∑–¥–µ–ª–µ '–ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã'.")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å—Ç–∞–≤–æ–∫
    for bid, order in bids_with_orders[:5]:
        status_text = {
            "active": "üïê –û–∂–∏–¥–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è",
            "selected": "‚úÖ –ü—Ä–∏–Ω—è—Ç–∞",
            "rejected": "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞",
        }.get(bid.status, "üïê –û–∂–∏–¥–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è")

        bid_text = (
            f"üí∞ –°—Ç–∞–≤–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑ #{order.id}: {status_text}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {order.category}\n"
            f"–¶–µ–Ω–∞: {bid.price} KZT\n"
            f"–î–∞—Ç–∞ —Å—Ç–∞–≤–∫–∏: {bid.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"view_bid:{bid.id}")]
        ])

        await message.answer(bid_text, reply_markup=keyboard)


@router.message(F.text == "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def my_orders_button(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–æ–≤ –º–∞—Å—Ç–µ—Ä–∞."""
    tg_id = message.from_user.id

    async with SessionFactory() as session:
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞
        master = (await session.execute(select(User).where(User.tg_id == tg_id))).scalars().first()
        if not master or master.role != "master":
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–∞—Å—Ç–µ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –º–∞—Å—Ç–µ—Ä–∞ –≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
        orders_query = select(Order).where(
            Order.master_id == master.id
        ).order_by(Order.created_at.desc())

        orders = (await session.execute(orders_query)).scalars().all()

    if not orders:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤. –ù–∞–π–¥–∏—Ç–µ –∑–∞–∫–∞–∑—ã –≤ —Ä–∞–∑–¥–µ–ª–µ '–ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã'.")
        return

    await message.answer("üì¶ –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:")

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É
    active_orders = [order for order in orders if order.status in ["assigned", "inprogress"]]
    completed_orders = [order for order in orders if order.status == "done"]

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    if active_orders:
        await message.answer("üîµ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:")
        for order in active_orders[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 –∑–∞–∫–∞–∑–æ–≤
            order_text = (
                f"üì¶ –ó–∞–∫–∞–∑ #{order.id} (–í —Ä–∞–±–æ—Ç–µ)\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {order.category}\n"
                f"–î–∞—Ç–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            )

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîç –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å", callback_data=f"track_order:{order.id}")],
                [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"complete_order:{order.id}")]
            ])

            await message.answer(order_text, reply_markup=keyboard)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    if completed_orders:
        await message.answer("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:")
        for order in completed_orders[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 3 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
            order_text = (
                f"üì¶ –ó–∞–∫–∞–∑ #{order.id} (–ó–∞–≤–µ—Ä—à–µ–Ω)\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {order.category}\n"
                f"–î–∞—Ç–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            )

            await message.answer(order_text)


@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile_button(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ—Ñ–∏–ª—å' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –º–∞—Å—Ç–µ—Ä–∞."""
    tg_id = message.from_user.id

    async with SessionFactory() as session:
        user = (await session.execute(select(User).where(User.tg_id == tg_id))).scalars().first()
        if not user:
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
            return

        profile_text = (
            f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
            f"–ò–º—è: {user.name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"–†–æ–ª—å: {user.role or '–ù–µ –≤—ã–±—Ä–∞–Ω–∞'}\n"
            f"ID: {user.tg_id}\n"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å", callback_data="change_role")]
        ])

        await message.answer(profile_text, reply_markup=keyboard)


@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_button(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    tg_id = message.from_user.id

    async with SessionFactory() as session:
        user = (await session.execute(select(User).where(User.tg_id == tg_id))).scalars().first()
        if not user:
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
            return

        settings_text = (
            f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:\n\n"
            f"–ò–º—è: {user.name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å", callback_data="change_role")]
        ])

        await message.answer(settings_text, reply_markup=keyboard)


@router.message(F.text == "üìç –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ")
async def tracking_clients_button(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤."""
    tg_id = message.from_user.id

    async with SessionFactory() as session:
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞
        master = (await session.execute(select(User).where(User.tg_id == tg_id))).scalars().first()
        if not master or master.role != "master":
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–∞—Å—Ç–µ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –º–∞—Å—Ç–µ—Ä–∞
        orders_query = select(Order).where(
            Order.master_id == master.id,
            Order.status.in_(["assigned", "inprogress"])
        ).order_by(Order.created_at.desc())

        orders = (await session.execute(orders_query)).scalars().all()

    if not orders:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è. \n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ä–∞–±–æ—Ç–µ."
        )
        return

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:",
        reply_markup=tracking_orders_keyboard(orders)
    )


@router.message(F.text == "üìä –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã")
async def active_orders_button(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤."""
    tg_id = message.from_user.id

    async with SessionFactory() as session:
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞
        master = (await session.execute(select(User).where(User.tg_id == tg_id))).scalars().first()
        if not master or master.role != "master":
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–∞—Å—Ç–µ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –º–∞—Å—Ç–µ—Ä–∞
        orders_query = select(Order).where(
            Order.master_id == master.id,
            Order.status.in_(["assigned", "inprogress"])
        ).order_by(Order.created_at.desc())

        orders = (await session.execute(orders_query)).scalars().all()

    if not orders:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ.")
        return

    await message.answer("üìä –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:")

    for order in orders:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        location_info = ""
        if order.location_updated_at:
            time_diff = datetime.datetime.now() - order.location_updated_at
            if time_diff.total_seconds() < 3600:  # –ú–µ–Ω—å—à–µ —á–∞—Å–∞
                location_info = f"\nüìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ {int(time_diff.total_seconds() // 60)} –º–∏–Ω. –Ω–∞–∑–∞–¥"
            else:
                location_info = f"\nüìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ {order.location_updated_at.strftime('%d.%m.%Y %H:%M')}"

        order_text = (
            f"üì¶ –ó–∞–∫–∞–∑ #{order.id}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {order.category}\n"
            f"–ê–¥—Ä–µ—Å: {order.address or '‚Äî'}\n"
            f"–°—Ç–∞—Ç—É—Å: {order.status}\n"
            f"–î–∞—Ç–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}{location_info}"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîç –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å", callback_data=f"track_order:{order.id}")],
            [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"complete_order:{order.id}")]
        ])

        await message.answer(order_text, reply_markup=keyboard)


@router.message(F.text == "üí¨ –°–æ–æ–±—â–µ–Ω–∏—è")
async def messages_button(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–æ–æ–±—â–µ–Ω–∏—è' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –º–∞—Å—Ç–µ—Ä–∞."""
    await message.answer("üí¨ –§—É–Ω–∫—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —á–∞—Ç Telegram –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏.")


@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def help_button(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏."""
    help_text = (
        "üìñ –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞ (—Ä–µ–∂–∏–º –º–∞—Å—Ç–µ—Ä–∞):\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/menu - –û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
        "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∑–∞–∫–∞–∑–∞–º–∏:\n"
        "1. –ù–∞–∂–º–∏—Ç–µ '–ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã' –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤\n"
        "2. –ù–∞–∂–º–∏—Ç–µ '–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É' –∏ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Ü–µ–Ω—É\n"
        "3. –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö —Å—Ç–∞–≤–æ–∫ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ —Å—Ç–∞–≤–∫–∏'\n\n"
        "–†–∞–±–æ—Ç–∞ —Å –∑–∞–∫–∞–∑–∞–º–∏:\n"
        "1. –ù–∞–∂–º–∏—Ç–µ '–ú–æ–∏ –∑–∞–∫–∞–∑—ã' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤\n"
        "2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ' –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤\n"
        "3. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–∑–≤–µ—Å—Ç–Ω—É—é –ª–æ–∫–∞—Ü–∏—é\n\n"
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:\n"
        "- –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç\n"
        "- –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–≤–æ–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤\n"
    )
    await message.answer(help_text)


@router.message(F.text == "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def master_categories_entry(message: Message, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞."""
    tg_id = message.from_user.id
    async with SessionFactory() as session:
        user = (await session.execute(select(User).where(User.tg_id == tg_id))).scalars().first()
        if not user or user.role != "master":
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–∞—Å—Ç–µ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞—Å—Ç–µ—Ä–∞
        result = await session.execute(
            select(master_categories.c.category).where(master_categories.c.user_id == user.id)
        )
        selected_categories = {row[0] for row in result.all()}

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    all_categories = MasterCategory.CATEGORIES

    await state.set_state(MasterCategorySetup.selecting)
    await state.update_data(mcat_selected=list(selected_categories))
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –≥–æ—Ç–æ–≤—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å (–Ω–∞–∂–∏–º–∞–π—Ç–µ, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∞—Ç—å/–≤—ã–∫–ª—é—á–∞—Ç—å). "
        "–ù–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.",
        reply_markup=categories_selection_keyboard(all_categories, selected_categories),
    )


@router.callback_query(MasterCategorySetup.selecting, F.data.startswith("mcat:toggle:"))
async def toggle_master_category(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    try:
        category = callback.data.split(":", 2)[2]
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", show_alert=True)
        return

    data = await state.get_data()
    selected = set(data.get("mcat_selected", []))
    if category in selected:
        selected.remove(category)
    else:
        selected.add(category)
    await state.update_data(mcat_selected=list(selected))

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    all_categories = MasterCategory.CATEGORIES

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑–º–µ—Ç–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    try:
        await callback.message.edit_reply_markup(
            reply_markup=categories_selection_keyboard(all_categories, selected)
        )
    except Exception:
        await callback.message.answer(
            "–û–±–Ω–æ–≤–ª–µ–Ω–æ.",
            reply_markup=categories_selection_keyboard(all_categories, selected),
        )
    await callback.answer()


@router.callback_query(MasterCategorySetup.selecting, F.data == "mcat:done")
async def save_master_categories(callback: CallbackQuery, state: FSMContext) -> None:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞—Å—Ç–µ—Ä–∞."""
    tg_id = callback.from_user.id
    data = await state.get_data()
    selected_categories = set(data.get("mcat_selected", []))

    async with SessionFactory() as session:
        user = (await session.execute(select(User).where(User.tg_id == tg_id))).scalars().first()
        if not user or user.role != "master":
            await callback.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–∞—Å—Ç–µ—Ä", show_alert=True)
            return

        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–∞—Å—Ç–µ—Ä–∞
        await session.execute(
            master_categories.delete().where(master_categories.c.user_id == user.id)
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if selected_categories:
            for category in selected_categories:
                await session.execute(
                    master_categories.insert().values(
                        user_id=user.id,
                        category=category
                    )
                )

        await session.commit()

    await state.clear()
    categories_text = ", ".join(selected_categories) if selected_categories else "‚Äî"
    try:
        await callback.message.edit_text(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –í–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {categories_text}")
    except Exception:
        await callback.message.answer(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –í–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {categories_text}")
    await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–∞—Å—Ç–µ—Ä–∞:", reply_markup=master_main_menu_keyboard())
    await callback.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ")


@router.message(F.text == "üîß –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
async def master_specialties_entry(message: Message, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞."""
    tg_id = message.from_user.id
    async with SessionFactory() as session:
        user = (await session.execute(select(User).where(User.tg_id == tg_id))).scalars().first()
        if not user or user.role != "master":
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–∞—Å—Ç–µ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
            return
        all_specs = (
            await session.execute(
                select(Specialty).where(Specialty.is_active == True).order_by(Specialty.name)
            )
        ).scalars().all()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —è–≤–Ω–æ —á–µ—Ä–µ–∑ –∑–∞–ø—Ä–æ—Å –≤–º–µ—Å—Ç–æ lazy-loading
        user_specs = (
            await session.execute(
                select(Specialty)
                .join(master_specialties)
                .where(master_specialties.c.user_id == user.id)
            )
        ).scalars().all()
        selected_ids = {s.id for s in user_specs}

    if not all_specs:
        await message.answer("–°–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π –ø—É—Å—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    await state.set_state(MasterSpecialtySetup.selecting)
    await state.update_data(mspec_selected=list(selected_ids))
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–Ω–∞–∂–∏–º–∞–π—Ç–µ, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∞—Ç—å/–≤—ã–∫–ª—é—á–∞—Ç—å). –ù–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.",
        reply_markup=specialties_selection_keyboard(all_specs, selected_ids),
    )


@router.callback_query(MasterSpecialtySetup.selecting, F.data.startswith("mspec:toggle:"))
async def toggle_master_specialty(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    try:
        spec_id = int(callback.data.split(":", 2)[2])
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä", show_alert=True)
        return

    data = await state.get_data()
    selected = set(data.get("mspec_selected", []))
    if spec_id in selected:
        selected.remove(spec_id)
    else:
        selected.add(spec_id)
    await state.update_data(mspec_selected=list(selected))

    async with SessionFactory() as session:
        all_specs = (
            await session.execute(
                select(Specialty).where(Specialty.is_active == True).order_by(Specialty.name)
            )
        ).scalars().all()

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑–º–µ—Ç–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    try:
        await callback.message.edit_reply_markup(
            reply_markup=specialties_selection_keyboard(all_specs, selected)
        )
    except Exception:
        await callback.message.answer(
            "–û–±–Ω–æ–≤–ª–µ–Ω–æ.",
            reply_markup=specialties_selection_keyboard(all_specs, selected),
        )
    await callback.answer()


@router.callback_query(MasterSpecialtySetup.selecting, F.data == "mspec:done")
async def save_master_specialties(callback: CallbackQuery, state: FSMContext) -> None:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∞—Å—Ç–µ—Ä–∞."""
    tg_id = callback.from_user.id
    data = await state.get_data()
    selected_ids = set(data.get("mspec_selected", []))

    async with SessionFactory() as session:
        user = (await session.execute(select(User).where(User.tg_id == tg_id))).scalars().first()
        if not user or user.role != "master":
            await callback.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–∞—Å—Ç–µ—Ä", show_alert=True)
            return

        specs = []
        if selected_ids:
            specs = (
                await session.execute(select(Specialty).where(Specialty.id.in_(selected_ids)))
            ).scalars().all()

        user.specialties = specs
        await session.commit()

    await state.clear()
    names = ", ".join([s.name for s in specs]) if specs else "‚Äî"
    try:
        await callback.message.edit_text(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –í–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {names}")
    except Exception:
        await callback.message.answer(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –í–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {names}")
    await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–∞—Å—Ç–µ—Ä–∞:", reply_markup=master_main_menu_keyboard())
    await callback.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ")


@router.callback_query(F.data.startswith("track_order:"))
async def track_order_callback(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è."""
    try:
        order_id = int(callback.data.split(":", 1)[1])
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞", show_alert=True)
        return

    tg_id = callback.from_user.id
    async with SessionFactory() as session:
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞
        master = (await session.execute(select(User).where(User.tg_id == tg_id))).scalars().first()
        if not master or master.role != "master":
            await callback.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–∞—Å—Ç–µ—Ä", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
        order = (await session.execute(select(Order).where(Order.id == order_id))).scalars().first()
        if not order:
            await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω —ç—Ç–æ–º—É –º–∞—Å—Ç–µ—Ä—É
        if order.master_id != master.id:
            await callback.answer("–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –≤–∞–º", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        client = (await session.execute(select(User).where(User.id == order.client_id))).scalars().first()
        if not client:
            await callback.answer("–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ –∏ –∫–ª–∏–µ–Ω—Ç–µ
    location_info = ""
    if order.location_updated_at:
        time_diff = datetime.datetime.now() - order.location_updated_at
        if time_diff.total_seconds() < 3600:  # –ú–µ–Ω—å—à–µ —á–∞—Å–∞
            location_info = f"\nüìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ {int(time_diff.total_seconds() // 60)} –º–∏–Ω. –Ω–∞–∑–∞–¥"
        else:
            location_info = f"\nüìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ {order.location_updated_at.strftime('%d.%m.%Y %H:%M')}"
    else:
        location_info = "\nüìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª–∞—Å—å"

    order_text = (
        f"üîç –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ #{order.id}\n\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {order.category}\n"
        f"–ê–¥—Ä–µ—Å: {order.address or '‚Äî'}\n"
        f"–ö–ª–∏–µ–Ω—Ç: {client.name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–°—Ç–∞—Ç—É—Å: {order.status}\n"
        f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {order.created_at.strftime('%d.%m.%Y %H:%M')}{location_info}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π
    try:
        await callback.message.edit_text(
            order_text,
            reply_markup=tracking_actions_keyboard(order.id)
        )
    except Exception:
        await callback.message.answer(
            order_text,
            reply_markup=tracking_actions_keyboard(order.id)
        )

    await callback.answer()


@router.callback_query(F.data.startswith("back:"))
async def handle_back_button(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –¥–ª—è –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –º–∞—Å—Ç–µ—Ä–∞."""
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Ç–µ—Ä
    tg_id = callback.from_user.id
    async with SessionFactory() as session:
        user = (await session.execute(select(User).where(User.tg_id == tg_id))).scalars().first()
        if not user or user.role != "master":
            return
    back_to = callback.data.split(":", 1)[1] if ":" in callback.data else "main"
    current_state = await state.get_state()

    if back_to == "main" or not current_state:
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await state.clear()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –º–∞—Å—Ç–µ—Ä–∞
        await callback.message.answer(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–∞—Å—Ç–µ—Ä–∞:",
            reply_markup=master_main_menu_keyboard()
        )
        await callback.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    elif back_to == "master_setup" and current_state == BidCreate.price:
        # –û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–≤–∫–∏
        await state.clear()
        try:
            await callback.message.edit_text(
                "–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ."
            )
        except Exception:
            await callback.message.answer("–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await callback.answer("–°—Ç–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    # –£–¥–∞–ª–µ–Ω–æ —É—Å–ª–æ–≤–∏–µ –¥–ª—è MasterSetup.zones, —Ç–∞–∫ –∫–∞–∫ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    else:
        # –ï—Å–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await callback.answer("–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ setup_zones —É–¥–∞–ª–µ–Ω, —Ç–∞–∫ –∫–∞–∫ —Ä–∞–π–æ–Ω—ã –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è


@router.callback_query(F.data == "change_role")
async def change_role_callback(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Ä–æ–ª–∏."""
    await state.clear()
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
        reply_markup=role_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("view_bid:"))
async def view_bid_details(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç–∞–≤–∫–∏ –º–∞—Å—Ç–µ—Ä–∞."""
    try:
        bid_id = int(callback.data.split(":", 1)[1])
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞–≤–∫–∏", show_alert=True)
        return

    async with SessionFactory() as session:
        result = await session.execute(
            select(Bid, Order).join(Order, Bid.order_id == Order.id).where(Bid.id == bid_id)
        )
        row = result.first()

    if not row:
        await callback.answer("–°—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    bid, order = row
    status_text = {
        "active": "üïê –û–∂–∏–¥–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è",
        "selected": "‚úÖ –ü—Ä–∏–Ω—è—Ç–∞",
        "rejected": "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞",
    }.get(bid.status, bid.status)

    text = (
        f"üí∞ –°—Ç–∞–≤–∫–∞ #{bid.id} –ø–æ –∑–∞–∫–∞–∑—É #{order.id}\n"
        f"–°—Ç–∞—Ç—É—Å: {status_text}\n"
        f"–¶–µ–Ω–∞: {bid.price} KZT\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {bid.note or '‚Äî'}\n\n"
        f"üì¶ –ó–∞–∫–∞–∑:\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {order.category}\n"
        f"–ê–¥—Ä–µ—Å: {order.address or '‚Äî'}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {order.description or '‚Äî'}\n"
        f"–°–æ–∑–¥–∞–Ω: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
    )

    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç–∞–≤–∫–∏
    buttons = []
    if bid.status == "active":
        buttons.append([InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data=f"edit_bid:{bid.id}")])
        buttons.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É", callback_data=f"cancel_bid:{bid.id}")])
    buttons.append([InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="back:main")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    try:
        await callback.message.edit_text(text, reply_markup=keyboard)
    except Exception:
        await callback.message.answer(text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.startswith("complete_order:"))
async def complete_order(callback: CallbackQuery, state: FSMContext) -> None:
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑ –º–∞—Å—Ç–µ—Ä–æ–º."""
    try:
        order_id = int(callback.data.split(":", 1)[1])
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞", show_alert=True)
        return

    tg_id = callback.from_user.id
    logger.info("master_cb:complete_order", extra={"user_id": tg_id, "order_id": order_id})

    async with SessionFactory() as session:
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞
        master = (await session.execute(select(User).where(User.tg_id == tg_id))).scalars().first()
        if not master:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
        order = (await session.execute(select(Order).where(Order.id == order_id))).scalars().first()
        if not order:
            await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω —ç—Ç–æ–º—É –º–∞—Å—Ç–µ—Ä—É
        if order.master_id != master.id:
            await callback.answer("–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –≤–∞–º", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –≤ —Å—Ç–∞—Ç—É—Å–µ "assigned"
        if order.status != "assigned":
            await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–±–æ—Ç–µ", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        client = (await session.execute(select(User).where(User.id == order.client_id))).scalars().first()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        order.status = "done"
        await session.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—É
    await callback.message.edit_text(
        f"–ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π.\n"
        f"–ö–ª–∏–µ–Ω—Ç –±—É–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞."
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    if client and client.tg_id:
        try:
            await callback.bot.send_message(
                chat_id=client.tg_id,
                text=(
                    f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –≤—ã–ø–æ–ª–Ω–µ–Ω!\n\n"
                    f"–ú–∞—Å—Ç–µ—Ä {master.name} –æ—Ç–º–µ—Ç–∏–ª –∑–∞–∫–∞–∑ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π.\n"
                    f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!"
                ),
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–û—Ü–µ–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data=f"rate_order:{order_id}")]
                ])
            )
        except Exception:
            logger.error("Failed to notify client", extra={"client_id": client.id, "order_id": order_id})

    await callback.answer("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!", show_alert=True)


@router.callback_query(F.data.startswith("edit_bid_order:"))
async def edit_bid_by_order(callback: CallbackQuery, state: FSMContext) -> None:
    """–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É –ø–æ ID –∑–∞–∫–∞–∑–∞."""
    try:
        order_id = int(callback.data.split(":", 1)[1])
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞", show_alert=True)
        return

    tg_id = callback.from_user.id
    async with SessionFactory() as session:
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞
        master = (await session.execute(select(User).where(User.tg_id == tg_id))).scalars().first()
        if not master:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–≤–∫—É –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞ —ç—Ç–æ—Ç –∑–∞–∫–∞–∑
        bid = (await session.execute(
            select(Bid).where(Bid.order_id == order_id, Bid.master_id == master.id)
        )).scalars().first()

        if not bid:
            await callback.answer("–°—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏
    await edit_bid_price(callback, state, bid_id=bid.id)


@router.callback_query(F.data.startswith("edit_bid:"))
async def edit_bid_price(callback: CallbackQuery, state: FSMContext, bid_id=None) -> None:
    """–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è —Å–≤–æ–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç–∞–≤–∫–∏."""
    if bid_id is None:
        try:
            bid_id = int(callback.data.split(":", 1)[1])
        except Exception:
            await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞–≤–∫–∏", show_alert=True)
            return

    tg_id = callback.from_user.id
    async with SessionFactory() as session:
        user = (await session.execute(select(User).where(User.tg_id == tg_id))).scalars().first()
        bid = (await session.execute(select(Bid).where(Bid.id == bid_id))).scalars().first()

    if not user or not bid or bid.master_id != (user.id if user else None):
        await callback.answer("–°—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    if bid.status != "active":
        await callback.answer("–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç—É —Å—Ç–∞–≤–∫—É", show_alert=True)
        return

    await state.set_state(BidCreate.price)
    await state.update_data(edit_bid_id=bid_id)

    cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="¬´ –û—Ç–º–µ–Ω–∞", callback_data="back:master_setup")]
    ])

    try:
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, KZT):",
            reply_markup=cancel_keyboard,
        )
    except Exception:
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, KZT):",
            reply_markup=cancel_keyboard,
        )
    await callback.answer()


@router.callback_query(F.data.startswith("cancel_bid:"))
async def cancel_bid(callback: CallbackQuery, state: FSMContext) -> None:
    """–û—Ç–º–µ–Ω–∞ —Å–≤–æ–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç–∞–≤–∫–∏ (—É–¥–∞–ª–µ–Ω–∏–µ)."""
    try:
        bid_id = int(callback.data.split(":", 1)[1])
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞–≤–∫–∏", show_alert=True)
        return

    tg_id = callback.from_user.id
    async with SessionFactory() as session:
        user = (await session.execute(select(User).where(User.tg_id == tg_id))).scalars().first()
        bid = (await session.execute(select(Bid).where(Bid.id == bid_id))).scalars().first()
        if not user or not bid or bid.master_id != (user.id if user else None):
            await callback.answer("–°—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        if bid.status != "active":
            await callback.answer("–ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É —Å—Ç–∞–≤–∫—É", show_alert=True)
            return
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–≤–∫—É
        await session.delete(bid)
        await session.commit()

    try:
        await callback.message.edit_text("–°—Ç–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    except Exception:
        await callback.message.answer("–°—Ç–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ master_pick_zones —É–¥–∞–ª–µ–Ω, —Ç–∞–∫ –∫–∞–∫ —Ä–∞–π–æ–Ω—ã –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è


@router.callback_query(F.data.startswith("bid:"))
async def start_bid(callback: CallbackQuery, state: FSMContext) -> None:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ –ø–µ—Ä–µ–¥ –≤–≤–æ–¥–æ–º —Ü–µ–Ω—ã
    try:
        order_id = int(callback.data.split(":", 1)[1])
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–∫–∞–∑–∞", show_alert=True)
        return

    async with SessionFactory() as session:
        order = (await session.execute(select(Order).where(Order.id == order_id))).scalars().first()

    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    if order.status != "new":
        await callback.answer("–ù–µ–ª—å–∑—è —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É: –∑–∞–∫–∞–∑ —É–∂–µ –Ω–µ –Ω–æ–≤—ã–π.", show_alert=True)
        return

    await state.update_data(order_id=order_id)
    await state.set_state(BidCreate.price)

    cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="¬´ –û—Ç–º–µ–Ω–∞", callback_data="back:master_setup")]
    ])

    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, KZT):",
        reply_markup=cancel_keyboard
    )
    await callback.answer()


@router.message(BidCreate.price)
async def submit_bid_price(message: Message, state: FSMContext) -> None:
    text = (message.text or "").strip()
    if not text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –±—É–∫–≤.")
        return
    price = int(text)

    data = await state.get_data()
    edit_bid_id = data.get("edit_bid_id")
    order_id = data.get("order_id")
    tg_id = message.from_user.id

    async with SessionFactory() as session:
        master = (
            await session.execute(select(User).where(User.tg_id == tg_id))
        ).scalars().first()
        if not master:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start.")
            await state.clear()
            return
        # –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç–∞–≤–∫–∏
        if edit_bid_id:
            bid = (
                await session.execute(select(Bid).where(Bid.id == edit_bid_id))
            ).scalars().first()
            if not bid or bid.master_id != master.id:
                await message.answer("–°—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –≤–∞–º –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç.")
                await state.clear()
                return
            if bid.status != "active":
                await message.answer("–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç—É —Å—Ç–∞–≤–∫—É.")
                await state.clear()
                return
            bid.price = price
            await session.commit()
            await message.answer("–¶–µ–Ω–∞ —Å—Ç–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        else:
            order = (
                await session.execute(select(Order).where(Order.id == order_id))
            ).scalars().first()
            if not order:
                await message.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                await state.clear()
                return
            if order.status != "new":
                await message.answer("–ù–µ–ª—å–∑—è —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É: –∑–∞–∫–∞–∑ —É–∂–µ –Ω–µ –Ω–æ–≤—ã–π.")
                await state.clear()
                return
            # –ó–∞—â–∏—Ç–∞: –º–∞—Å—Ç–µ—Ä –Ω–µ –º–æ–∂–µ—Ç —Å—Ç–∞–≤–∏—Ç—å –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
            if order.client_id == master.id:
                await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑.")
                await state.clear()
                return
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–æ–Ω—ã —É–¥–∞–ª–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ —Ä–∞–π–æ–Ω—ã –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å—Ç–∞–≤–∫–∞ –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞ —ç—Ç–æ—Ç –∑–∞–∫–∞–∑
            existing = (
                await session.execute(
                    select(Bid).where(Bid.order_id == order_id, Bid.master_id == master.id)
                )
            ).scalars().first()

            if existing:
                existing.price = price
                await session.commit()
                await message.answer("–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞–≤–∫–∏
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏ –∫–ª–∏–µ–Ω—Ç–∞
                    order = (await session.execute(select(Order).where(Order.id == order_id))).scalars().first()
                    client = (await session.execute(select(User).where(User.id == order.client_id))).scalars().first()
                    
                    if client and client.tg_id:
                        kb = InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", callback_data=f"order_bids:{order.id}")]
                        ])
                        await message.bot.send_message(
                            chat_id=client.tg_id,
                            text=f"üí∞ –°—Ç–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ –≤–∞—à–µ–º—É –∑–∞–∫–∞–∑—É #{order.id}: {price} KZT –æ—Ç –º–∞—Å—Ç–µ—Ä–∞ {master.name or '–ú–∞—Å—Ç–µ—Ä'}",
                            reply_markup=kb
                        )
                except Exception as e:
                    logger.error("Failed to notify client about bid update", extra={
                        "order_id": order_id, 
                        "client_id": order.client_id if order else None,
                        "error": str(e)
                    })
            else:
                bid = Bid(order_id=order_id, master_id=master.id, price=price)
                session.add(bid)
                await session.commit()
                await message.answer("–°—Ç–∞–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞.")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ –Ω–æ–≤–æ–π —Å—Ç–∞–≤–∫–µ
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏ –∫–ª–∏–µ–Ω—Ç–∞
                    order = (await session.execute(select(Order).where(Order.id == order_id))).scalars().first()
                    client = (await session.execute(select(User).where(User.id == order.client_id))).scalars().first()
                    
                    if client and client.tg_id:
                        kb = InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", callback_data=f"order_bids:{order.id}")]
                        ])
                        await message.bot.send_message(
                            chat_id=client.tg_id,
                            text=f"üí∞ –ù–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –ø–æ –≤–∞—à–µ–º—É –∑–∞–∫–∞–∑—É #{order.id}: {price} KZT –æ—Ç –º–∞—Å—Ç–µ—Ä–∞ {master.name or '–ú–∞—Å—Ç–µ—Ä'}",
                            reply_markup=kb
                        )
                except Exception as e:
                    logger.error("Failed to notify client about new bid", extra={
                        "order_id": order_id, 
                        "client_id": order.client_id if order else None,
                        "error": str(e)
                    })

    await state.clear()
