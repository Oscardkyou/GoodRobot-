"""Handlers for –º–∞—Å—Ç–µ—Ä role: setup zones and create bids."""
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from sqlalchemy import select

from app.bot.keyboards import zones_keyboard_master_full, main_menu_keyboard
from app.bot.states import BidCreate, MasterSetup
from app.models import Bid, User
from core.db import SessionFactory

router = Router()


@router.message(Command("help_master"))
async def cmd_help_master(message: Message) -> None:
    await message.answer(
        "–í—ã –º–∞—Å—Ç–µ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–π–æ–Ω—ã –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è."
    )


@router.message(Command("menu"))
async def cmd_menu(message: Message, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
    await state.clear()
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu_keyboard()
    )


@router.message(F.text == "üìç –ó–∞–∫–∞–∑—ã –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏")
async def nearby_orders_button(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏."""
    tg_id = message.from_user.id
    
    async with SessionFactory() as session:
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞ –∏ –µ–≥–æ –∑–æ–Ω—ã
        user = (await session.execute(select(User).where(User.tg_id == tg_id))).scalars().first()
        if not user or not user.zones:
            await message.answer("–í—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏ –∑–æ–Ω—ã –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setup –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –≤ –∑–æ–Ω–∞—Ö –º–∞—Å—Ç–µ—Ä–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "new"
        orders = (await session.execute(
            select(Order).where(
                Order.zone.in_(user.zones),
                Order.status == "new"
            ).order_by(Order.created_at.desc())
        )).scalars().all()
    
    if not orders:
        await message.answer("–í –≤–∞—à–∏—Ö —Ä–∞–π–æ–Ω–∞—Ö –ø–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–∫–∞–∑–æ–≤
    for order in orders[:5]:
        order_text = (
            f"üì¶ –ó–∞–∫–∞–∑ #{order.id}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {order.category}\n"
            f"–†–∞–π–æ–Ω: {order.zone}\n"
            f"–î–∞—Ç–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"view_order:{order.id}")],
            [InlineKeyboardButton(text="–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", callback_data=f"bid:{order.id}")]
        ])
        
        await message.answer(order_text, reply_markup=keyboard)


@router.message(F.text == "üí∞ –ú–æ–∏ —Å—Ç–∞–≤–∫–∏")
async def my_bids_button(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–∏—Ö —Å—Ç–∞–≤–æ–∫."""
    tg_id = message.from_user.id
    
    async with SessionFactory() as session:
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞
        user = (await session.execute(select(User).where(User.tg_id == tg_id))).scalars().first()
        if not user:
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–≤–∫–∏ –º–∞—Å—Ç–µ—Ä–∞
        bids_query = (
            select(Bid, Order)
            .join(Order, Bid.order_id == Order.id)
            .where(Bid.master_id == user.id)
            .order_by(Bid.created_at.desc())
        )
        
        result = await session.execute(bids_query)
        bids_with_orders = result.all()
    
    if not bids_with_orders:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞–≤–æ–∫. –ù–∞–π–¥–∏—Ç–µ –∑–∞–∫–∞–∑—ã –≤ —Ä–∞–∑–¥–µ–ª–µ '–ó–∞–∫–∞–∑—ã –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏'.")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å—Ç–∞–≤–æ–∫
    for bid, order in bids_with_orders[:5]:
        status_text = {
            "pending": "üïê –û–∂–∏–¥–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è",
            "accepted": "‚úÖ –ü—Ä–∏–Ω—è—Ç–∞",
            "rejected": "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞"
        }.get(bid.status, "üïê –û–∂–∏–¥–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è")
        
        bid_text = (
            f"üí∞ –°—Ç–∞–≤–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑ #{order.id}: {status_text}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {order.category}\n"
            f"–†–∞–π–æ–Ω: {order.zone}\n"
            f"–¶–µ–Ω–∞: {bid.price} —Ä—É–±.\n"
            f"–î–∞—Ç–∞ —Å—Ç–∞–≤–∫–∏: {bid.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"view_bid:{bid.id}")]
        ])
        
        await message.answer(bid_text, reply_markup=keyboard)


@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_button(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    tg_id = message.from_user.id
    
    async with SessionFactory() as session:
        user = (await session.execute(select(User).where(User.tg_id == tg_id))).scalars().first()
        if not user:
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
            return
            
        zones_text = ", ".join(user.zones) if user.zones else "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
        
        settings_text = (
            f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:\n\n"
            f"–ò–º—è: {user.name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"–†–∞–π–æ–Ω—ã –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è: {zones_text}\n"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–π–æ–Ω—ã", callback_data="setup_zones")],
            [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å", callback_data="change_role")]
        ])
        
        await message.answer(settings_text, reply_markup=keyboard)


@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def help_button(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏."""
    help_text = (
        "üìñ –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞ (—Ä–µ–∂–∏–º –º–∞—Å—Ç–µ—Ä–∞):\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/menu - –û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/setup - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–π–æ–Ω—ã –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è\n\n"
        "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∑–∞–∫–∞–∑–∞–º–∏:\n"
        "1. –ù–∞–∂–º–∏—Ç–µ '–ó–∞–∫–∞–∑—ã –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏' –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –≤ –≤–∞—à–∏—Ö —Ä–∞–π–æ–Ω–∞—Ö\n"
        "2. –ù–∞–∂–º–∏—Ç–µ '–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É' –∏ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Ü–µ–Ω—É\n"
        "3. –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö —Å—Ç–∞–≤–æ–∫ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ —Å—Ç–∞–≤–∫–∏'\n\n"
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:\n"
        "- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–π–æ–Ω–æ–≤ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è\n"
        "- –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç\n"
    )
    
    await message.answer(help_text)


@router.callback_query(F.data.startswith("back:"))
async def handle_back_button(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –¥–ª—è –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –º–∞—Å—Ç–µ—Ä–∞."""
    back_to = callback.data.split(":", 1)[1] if ":" in callback.data else "main"
    current_state = await state.get_state()
    
    if back_to == "main" or not current_state:
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await state.clear()
        try:
            await callback.message.edit_text(
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–∞—Å—Ç–µ—Ä–∞:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ó–∞–∫–∞–∑—ã –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏", callback_data="master:nearby_orders")],
                    [InlineKeyboardButton(text="–ú–æ–∏ —Å—Ç–∞–≤–∫–∏", callback_data="master:my_bids")],
                    [InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è", callback_data="master:profile")]
                ])
            )
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await callback.message.answer(
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–∞—Å—Ç–µ—Ä–∞:",
                reply_markup=main_menu_keyboard()
            )
        await callback.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    elif back_to == "master_setup" and current_state == BidCreate.price:
        # –û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–≤–∫–∏
        await state.clear()
        try:
            await callback.message.edit_text(
                "–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ."
            )
        except Exception:
            await callback.message.answer("–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await callback.answer("–°—Ç–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    elif back_to == "zones_setup" and current_state == MasterSetup.zones:
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏
        await state.clear()
        from app.bot.keyboards import role_keyboard
        try:
            await callback.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
                reply_markup=role_keyboard()
            )
        except Exception:
            await callback.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
                reply_markup=role_keyboard()
            )
        await callback.answer("–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏")
    else:
        # –ï—Å–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await callback.answer("–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏")


@router.callback_query(MasterSetup.zones, F.data.startswith("mzone:"))
async def master_pick_zones(callback: CallbackQuery, state: FSMContext) -> None:
    data = callback.data.split(":", 1)[1]
    selected = (await state.get_data()).get("mzones", [])

    if data == "done":
        tg_id = callback.from_user.id
        async with SessionFactory() as session:
            user = (
                await session.execute(select(User).where(User.tg_id == tg_id))
            ).scalars().first()
            if user:
                user.zones = selected
                await session.commit()
        await state.clear()
        await callback.message.edit_text(
            f"–ì–æ—Ç–æ–≤–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–π–æ–Ω—ã: {', '.join(selected) if selected else '–Ω–µ –≤—ã–±—Ä–∞–Ω—ã'}"
        )
        await callback.answer()
        return

    if data == "clear":
        selected = []
    else:
        if data in selected:
            selected = [z for z in selected if z != data]
        else:
            selected = selected + [data]

    await state.update_data(mzones=selected)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω—ã –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è:",
        reply_markup=zones_keyboard_master_full(selected, with_back=True),
    )
    await callback.answer()


@router.callback_query(F.data.startswith("bid:"))
async def start_bid(callback: CallbackQuery, state: FSMContext) -> None:
    order_id = int(callback.data.split(":", 1)[1])
    await state.update_data(order_id=order_id)
    await state.set_state(BidCreate.price)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="¬´ –û—Ç–º–µ–Ω–∞", callback_data="back:master_setup")]
    ])
    
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, KZT):", 
        reply_markup=cancel_keyboard
    )
    await callback.answer()


@router.message(BidCreate.price)
async def submit_bid_price(message: Message, state: FSMContext) -> None:
    text = (message.text or "").strip()
    if not text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –±—É–∫–≤.")
        return
    price = int(text)

    data = await state.get_data()
    order_id = data.get("order_id")
    tg_id = message.from_user.id

    async with SessionFactory() as session:
        master = (
            await session.execute(select(User).where(User.tg_id == tg_id))
        ).scalars().first()
        if not master:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start.")
            await state.clear()
            return

        bid = Bid(order_id=order_id, master_id=master.id, price=price)
        session.add(bid)
        await session.commit()

    await message.answer("–°—Ç–∞–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞.")
    await state.clear()
