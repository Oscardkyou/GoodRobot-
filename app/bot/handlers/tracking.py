"""Handlers for tracking clients and location updates."""
import datetime
import logging

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from sqlalchemy import select

from app.bot.keyboards import (
    location_update_request_keyboard,
    tracking_actions_keyboard,
    tracking_orders_keyboard,
)
from app.bot.states import ClientActions, MasterActions
from app.models import Order, User
from core.db import SessionFactory

logger = logging.getLogger("bot.tracking")

router = Router()


@router.callback_query(F.data.startswith("request_location:"))
async def request_location_update(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞."""
    try:
        order_id: int = int(callback.data.split(":", 1)[1])
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞", show_alert=True)
        return

    tg_id: int = callback.from_user.id
    async with SessionFactory() as session:
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞
        master: User | None = (await session.execute(select(User).where(User.tg_id == tg_id))).scalars().first()
        if not master or master.role != "master":
            await callback.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–∞—Å—Ç–µ—Ä", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
        order: Order | None = (await session.execute(select(Order).where(Order.id == order_id))).scalars().first()
        if not order:
            await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω —ç—Ç–æ–º—É –º–∞—Å—Ç–µ—Ä—É
        if order.master_id != master.id:
            await callback.answer("–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –≤–∞–º", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        client: User | None = (await session.execute(select(User).where(User.id == order.client_id))).scalars().first()
        if not client or not client.tg_id:
            await callback.answer("–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç Telegram ID", show_alert=True)
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç—É –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        try:
            await callback.bot.send_message(
                chat_id=client.tg_id,
                text=(
                    f"üìç –ú–∞—Å—Ç–µ—Ä {master.name or '–í–∞—à –º–∞—Å—Ç–µ—Ä'} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∞—à–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ "
                    f"–¥–ª—è –∑–∞–∫–∞–∑–∞ #{order.id}.\n\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º —Ç–µ–∫—É—â–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º."
                ),
                reply_markup=location_update_request_keyboard(master.id)
            )

            # –°–æ–æ–±—â–∞–µ–º –º–∞—Å—Ç–µ—Ä—É, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
            await callback.message.answer(
                f"‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É {client.name or '–∫–ª–∏–µ–Ω—Ç—É'}.\n"
                f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –æ–±–Ω–æ–≤–∏—Ç —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é."
            )

            logger.info(
                "location_update_requested",
                extra={
                    "master_id": master.id,
                    "client_id": client.id,
                    "order_id": order.id,
                }
            )
        except Exception as e:
            logger.error(
                "failed_to_send_location_request",
                extra={
                    "master_id": master.id,
                    "client_id": client.id,
                    "order_id": order.id,
                    "error": str(e)
                }
            )
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç—É", show_alert=True)
            return

    await callback.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É")


@router.callback_query(F.data.startswith("show_map:"))
async def show_client_location(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–µ."""
    try:
        order_id: int = int(callback.data.split(":", 1)[1])
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞", show_alert=True)
        return

    tg_id: int = callback.from_user.id
    async with SessionFactory() as session:
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞
        master: User | None = (await session.execute(select(User).where(User.tg_id == tg_id))).scalars().first()
        if not master or master.role != "master":
            await callback.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–∞—Å—Ç–µ—Ä", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
        order: Order | None = (await session.execute(select(Order).where(Order.id == order_id))).scalars().first()
        if not order:
            await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω —ç—Ç–æ–º—É –º–∞—Å—Ç–µ—Ä—É
        if order.master_id != master.id:
            await callback.answer("–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –≤–∞–º", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        if not order.latitude or not order.longitude:
            await callback.answer("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
        try:
            await callback.message.answer_location(
                latitude=order.latitude,
                longitude=order.longitude
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            location_time_info: str = ""
            if order.location_updated_at:
                time_diff: datetime.timedelta = datetime.datetime.now() - order.location_updated_at
                if time_diff.total_seconds() < 3600:  # –ú–µ–Ω—å—à–µ —á–∞—Å–∞
                    location_time_info = f"–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ {int(time_diff.total_seconds() // 60)} –º–∏–Ω. –Ω–∞–∑–∞–¥"
                else:
                    location_time_info = f"–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ {order.location_updated_at.strftime('%d.%m.%Y %H:%M')}"
            else:
                location_time_info = "–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            await callback.message.answer(f"üìç {location_time_info}")

        except Exception as e:
            logger.error(
                "failed_to_send_location",
                extra={
                    "master_id": master.id,
                    "order_id": order.id,
                    "error": str(e)
                }
            )
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", show_alert=True)
            return

    await callback.answer()


@router.callback_query(F.data.startswith("contact_client:"))
async def contact_client(callback: CallbackQuery, state: FSMContext) -> None:
    """–°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º."""
    try:
        order_id: int = int(callback.data.split(":", 1)[1])
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞", show_alert=True)
        return

    tg_id: int = callback.from_user.id
    async with SessionFactory() as session:
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞
        master: User | None = (await session.execute(select(User).where(User.tg_id == tg_id))).scalars().first()
        if not master or master.role != "master":
            await callback.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–∞—Å—Ç–µ—Ä", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
        order: Order | None = (await session.execute(select(Order).where(Order.id == order_id))).scalars().first()
        if not order:
            await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω —ç—Ç–æ–º—É –º–∞—Å—Ç–µ—Ä—É
        if order.master_id != master.id:
            await callback.answer("–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –≤–∞–º", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        client: User | None = (await session.execute(select(User).where(User.id == order.client_id))).scalars().first()
        if not client:
            await callback.answer("–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        contact_info: str = (
            f"üì± –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞:\n\n"
            f"–ò–º—è: {client.name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
        if hasattr(client, 'phone') and client.phone:
            contact_info += f"–¢–µ–ª–µ—Ñ–æ–Ω: {client.phone}\n"
        else:
            contact_info += "–¢–µ–ª–µ—Ñ–æ–Ω: –ù–µ —É–∫–∞–∑–∞–Ω\n"

        # –î–æ–±–∞–≤–ª—è–µ–º Telegram username, –µ—Å–ª–∏ –µ—Å—Ç—å
        if hasattr(client, 'username') and client.username:
            contact_info += f"Telegram: @{client.username}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞
        keyboard: InlineKeyboardMarkup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É",
                callback_data=f"message_client:{order.id}"
            )],
            [InlineKeyboardButton(
                text="¬´ –ù–∞–∑–∞–¥ –∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—é",
                callback_data=f"track_order:{order.id}"
            )]
        ])

        await callback.message.answer(contact_info, reply_markup=keyboard)

    await callback.answer()


@router.callback_query(F.data.startswith("message_client:"))
async def start_message_to_client(callback: CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É."""
    try:
        order_id: int = int(callback.data.split(":", 1)[1])
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–∫–∞–∑–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(message_order_id=order_id)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    await state.set_state(MasterActions.waiting_message)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    cancel_keyboard: InlineKeyboardMarkup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="¬´ –û—Ç–º–µ–Ω–∞", callback_data=f"track_order:{order_id}")]
    ])

    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞:",
        reply_markup=cancel_keyboard
    )

    await callback.answer()


@router.callback_query(F.data.startswith("track_order:"))
async def track_order(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞."""
    try:
        order_id: int = int(callback.data.split(":", 1)[1])
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞", show_alert=True)
        return

    tg_id: int = callback.from_user.id
    async with SessionFactory() as session:
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞
        master: User | None = (await session.execute(select(User).where(User.tg_id == tg_id))).scalars().first()
        if not master or master.role != "master":
            await callback.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–∞—Å—Ç–µ—Ä", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
        order: Order | None = (await session.execute(select(Order).where(Order.id == order_id))).scalars().first()
        if not order:
            await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω —ç—Ç–æ–º—É –º–∞—Å—Ç–µ—Ä—É
        if order.master_id != master.id:
            await callback.answer("–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –≤–∞–º", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        client: User | None = (await session.execute(select(User).where(User.id == order.client_id))).scalars().first()
        if not client:
            await callback.answer("–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –∏ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    order_info: str = (
        f"üì¶ –ó–∞–∫–∞–∑ #{order.id}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {order.category}\n"
        f"–ö–ª–∏–µ–Ω—Ç: {client.name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–°—Ç–∞—Ç—É—Å: {order.status}\n"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
    if order.latitude and order.longitude:
        order_info += f"\n–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è: {order.latitude}, {order.longitude}"
        if order.location_updated_at:
            time_diff: datetime.timedelta = datetime.datetime.now() - order.location_updated_at
            if time_diff.total_seconds() < 3600:  # –ú–µ–Ω—å—à–µ —á–∞—Å–∞
                order_info += f"\n–û–±–Ω–æ–≤–ª–µ–Ω–∞ {int(time_diff.total_seconds() // 60)} –º–∏–Ω. –Ω–∞–∑–∞–¥"
            else:
                order_info += f"\n–û–±–Ω–æ–≤–ª–µ–Ω–∞ {order.location_updated_at.strftime('%d.%m.%Y %H:%M')}"
    else:
        order_info += "\n–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è: –ù–µ —É–∫–∞–∑–∞–Ω–∞"

    await callback.message.edit_text(
        order_info,
        reply_markup=tracking_actions_keyboard(order.id)
    )

    await callback.answer()


@router.callback_query(F.data == "tracking:list")
async def show_tracking_list(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è."""
    tg_id: int = callback.from_user.id

    async with SessionFactory() as session:
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞
        master: User | None = (await session.execute(select(User).where(User.tg_id == tg_id))).scalars().first()
        if not master or master.role != "master":
            await callback.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –º–∞—Å—Ç–µ—Ä", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –º–∞—Å—Ç–µ—Ä–∞
        orders_query = select(Order).where(
            Order.master_id == master.id,
            Order.status.in_(["assigned", "inprogress"])
        ).order_by(Order.created_at.desc())

        orders: list[Order] = (await session.execute(orders_query)).scalars().all()

    if not orders:
        await callback.message.edit_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è."
        )
        return

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:",
        reply_markup=tracking_orders_keyboard(orders)
    )

    await callback.answer()


@router.callback_query(F.data.startswith("update_location:"))
async def client_update_location_button(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–º."""
    try:
        master_id: int = int(callback.data.split(":", 1)[1])
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–∞—Å—Ç–µ—Ä–∞", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –º–∞—Å—Ç–µ—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(location_master_id=master_id)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    await state.set_state(ClientActions.waiting_location)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
    location_keyboard: ReplyKeyboardMarkup = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await callback.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à—É —Ç–µ–∫—É—â—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:",
        reply_markup=location_keyboard
    )

    await callback.answer()


@router.callback_query(F.data.startswith("decline_location:"))
async def client_decline_location(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é."""
    try:
        master_id: int = int(callback.data.split(":", 1)[1])
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–∞—Å—Ç–µ—Ä–∞", show_alert=True)
        return

    async with SessionFactory() as session:
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞
        master: User | None = (await session.execute(select(User).where(User.id == master_id))).scalars().first()
        if not master or not master.tg_id:
            await callback.answer("–ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        client_tg_id: int = callback.from_user.id
        client: User | None = (await session.execute(select(User).where(User.tg_id == client_tg_id))).scalars().first()
        if not client:
            await callback.answer("–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—É
        try:
            await callback.bot.send_message(
                chat_id=master.tg_id,
                text=f"‚ùå –ö–ª–∏–µ–Ω—Ç {client.name or '–∫–ª–∏–µ–Ω—Ç'} –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é."
            )
        except Exception:
            logger.error(
                "failed_to_notify_master_about_decline",
                extra={
                    "master_id": master.id,
                    "client_id": client.id
                }
            )

    await callback.message.edit_text("–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ–±–Ω–æ–≤–ª—è—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.")
    await callback.answer()
