"""Partner role handlers - referral system and partner dashboard."""
import logging
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup

from sqlalchemy import select, func

from app.bot.states import PartnerSetup
from app.models import Partner, User, Payout, Order
from core.db import SessionFactory
from app.bot.keyboards import main_menu_keyboard, add_back_button


logger = logging.getLogger("bot.partner")


router = Router()


@router.message(Command("menu"))
async def cmd_menu(message: Message, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
    await state.clear()
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–∞—Ä—Ç–Ω–µ—Ä–∞:",
        reply_markup=main_menu_keyboard()
    )


@router.message(F.text == "üìä –î–∞—à–±–æ—Ä–¥")
async def dashboard_button(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞."""
    await cmd_partner_dashboard(message)


@router.message(F.text == "üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞")
async def ref_link_button(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏."""
    # –î–µ–ª–µ–≥–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–º–∞–Ω–¥–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    logger.info("partner_button:link", extra={"user_id": message.from_user.id})
    await cmd_partner_link(message)


@router.message(F.text == "üí≥ –í—ã–ø–ª–∞—Ç—ã")
async def payouts_button(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã–ø–ª–∞—Ç."""
    logger.info("partner_button:payouts", extra={"user_id": message.from_user.id})
    await cmd_partner_payouts(message)


@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def help_button(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏."""
    help_text = (
        "üìñ –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞ (—Ä–µ–∂–∏–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞):\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/menu - –û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/partner_stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º\n"
        "/partner_link - –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É\n\n"
        "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:\n"
        "1. –ü–æ–ª—É—á–∏—Ç–µ —Å–≤–æ—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É\n"
        "2. –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –º–∞—Å—Ç–µ—Ä–æ–≤ –∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ\n"
        "3. –ü–æ–ª—É—á–∞–π—Ç–µ % –æ—Ç –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –≤–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "4. –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –≤—ã–ø–ª–∞—Ç—ã –≤ —Ä–∞–∑–¥–µ–ª–µ '–î–∞—à–±–æ—Ä–¥'\n\n"
        "–í—ã–ø–ª–∞—Ç—ã:\n"
        "- –í—ã–ø–ª–∞—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞\n"
        "- –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É –≤ —Ä–∞–∑–¥–µ–ª–µ '–í—ã–ø–ª–∞—Ç—ã'\n"
    )
    
    await message.answer(help_text)


@router.message(F.text == "üë®‚Äçüîß –ü—Ä–æ—Ñ–∏–ª—å")
async def profile_button(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è."""
    tg_id = message.from_user.id
    
    async with SessionFactory() as session:
        user = (await session.execute(select(User).where(User.tg_id == tg_id))).scalars().first()
        if not user:
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
            return
            
        role_text = {
            "client": "üë§ –ö–ª–∏–µ–Ω—Ç",
            "master": "üë®‚Äçüîß –ú–∞—Å—Ç–µ—Ä",
            "partner": "ü§ù –ü–∞—Ä—Ç–Ω–µ—Ä"
        }.get(user.role, "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
        
        profile_text = (
            f"üìù –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
            f"–ò–º—è: {user.name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"–†–æ–ª—å: {role_text}\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å", callback_data="change_role")]
        ])
        
        await message.answer(profile_text, reply_markup=keyboard)


@router.callback_query(F.data.startswith("back:"))
async def handle_back_button(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –¥–ª—è –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–∞—Ä—Ç–Ω–µ—Ä–∞."""
    back_to = callback.data.split(":", 1)[1] if ":" in callback.data else "main"
    current_state = await state.get_state()
    
    if back_to == "main" or not current_state:
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        await state.clear()
        try:
            await callback.message.edit_text(
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–∞—Ä—Ç–Ω–µ—Ä–∞:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üìä –î–∞—à–±–æ—Ä–¥", callback_data="partner:dashboard")],
                    [InlineKeyboardButton(text="üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", callback_data="partner:link")],
                    [InlineKeyboardButton(text="üí≥ –í—ã–ø–ª–∞—Ç—ã", callback_data="partner:payouts")]
                ])
            )
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await callback.message.answer(
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–∞—Ä—Ç–Ω–µ—Ä–∞:",
                reply_markup=main_menu_keyboard()
            )
        await callback.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    elif back_to == "partner_dashboard":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –¥–∞—à–±–æ—Ä–¥—É –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        try:
            await cmd_partner_dashboard(callback.message)
            await callback.answer("–í–æ–∑–≤—Ä–∞—Ç –∫ –¥–∞—à–±–æ—Ä–¥—É")
        except Exception:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –¥–∞—à–±–æ—Ä–¥—É")
    elif back_to == "role_select":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏
        await state.clear()
        from app.bot.keyboards import role_keyboard
        try:
            await callback.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
                reply_markup=role_keyboard()
            )
        except Exception:
            await callback.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
                reply_markup=role_keyboard()
            )
        await callback.answer("–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏")
    else:
        # –ï—Å–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await callback.answer("–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏")


@router.message(Command("help_partner"))
async def cmd_help_partner(message: Message) -> None:
    """Partner help command with available functions."""
    help_text = (
        "ü§ù –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/partner_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º\n"
        "/partner_link - –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É\n"
        "/partner_payouts - –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–ª–∞—Ç\n"
        "/partner_dashboard - –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    )
    await message.answer(help_text)


@router.message(Command("partner_link"))
async def cmd_partner_link(message: Message) -> None:
    """Generate and show partner referral link."""
    tg_id = message.from_user.id
    logger.info("partner_cmd:link", extra={"user_id": tg_id})
    
    async with SessionFactory() as session:
        user = (await session.execute(select(User).where(User.tg_id == tg_id))).scalars().first()
        if not user or user.role != "partner":
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø–∞—Ä—Ç–Ω–µ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏.")
            return
            
        partner = (await session.execute(select(Partner).where(Partner.user_id == user.id))).scalars().first()
        if not partner:
            # Create partner record
            partner = Partner(
                user_id=user.id,
                slug=f"partner_{user.tg_id}",
                referral_code=f"REF{user.tg_id:08d}"
            )
            session.add(partner)
            await session.commit()
            
        # Fetch bot username reliably via get_me()
        try:
            me = await message.bot.get_me()
            username = getattr(me, "username", None)
        except Exception:
            username = None

        referral_link = None
        if username:
            referral_link = f"https://t.me/{username}?start={partner.referral_code}"
        else:
            logger.warning(
                "partner_link:no_username",
                extra={"user_id": tg_id}
            )
        
    if referral_link:
        await message.answer(
            f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{referral_link}\n\n"
            f"–ö–æ–¥: {partner.referral_code}\n\n"
            f"–î–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ 5% –æ—Ç –∑–∞–∫–∞–∑–æ–≤ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤!"
        )
    else:
        await message.answer(
            f"–ö–æ–¥: {partner.referral_code}\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å username –±–æ—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏. –û—Ç–∫—Ä–æ–π—Ç–µ –±–æ—Ç–∞ –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤—Ä—É—á–Ω—É—é."
        )


@router.message(Command("partner_stats"))
async def cmd_partner_stats(message: Message) -> None:
    """Show partner statistics."""
    tg_id = message.from_user.id
    logger.info("partner_cmd:stats", extra={"user_id": tg_id})
    
    async with SessionFactory() as session:
        user = (await session.execute(select(User).where(User.tg_id == tg_id))).scalars().first()
        if not user or user.role != "partner":
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø–∞—Ä—Ç–Ω–µ—Ä.")
            return
            
        partner = (await session.execute(select(Partner).where(Partner.user_id == user.id))).scalars().first()
        if not partner:
            await message.answer("–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
            
        # Count referred users
        referred_users = (await session.execute(
            select(func.count(User.id)).where(User.referrer_id == user.id)
        )).scalar()
        
        # Count completed orders with commission
        completed_orders = (await session.execute(
            select(func.count(Payout.id))
            .join(Order, Payout.order_id == Order.id)
            .join(User, Order.client_id == User.id)
            .where(User.referrer_id == user.id)
            .where(Payout.status == "paid")
        )).scalar()
        
        total_earned = (await session.execute(
            select(func.coalesce(func.sum(Payout.amount_partner), 0))
            .join(Order, Payout.order_id == Order.id)
            .join(User, Order.client_id == User.id)
            .where(User.referrer_id == user.id)
            .where(Payout.status == "paid")
        )).scalar()
        
    stats_text = (
        f"üìä –í–∞—à–∞ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"üë• –ü—Ä–∏–≤–µ–¥–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {referred_users}\n"
        f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {completed_orders}\n"
        f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_earned} KZT\n"
        f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç: 5% –æ—Ç –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞"
    )
    await message.answer(stats_text)


@router.message(Command("partner_payouts"))
async def cmd_partner_payouts(message: Message) -> None:
    """Show partner payout history."""
    tg_id = message.from_user.id
    logger.info("partner_cmd:payouts", extra={"user_id": tg_id})
    
    async with SessionFactory() as session:
        user = (await session.execute(select(User).where(User.tg_id == tg_id))).scalars().first()
        if not user or user.role != "partner":
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø–∞—Ä—Ç–Ω–µ—Ä.")
            return
            
        payouts = (await session.execute(
            select(Payout).join(Order, Payout.order_id == Order.id)
            .join(User, Order.client_id == User.id)
            .where(User.referrer_id == user.id)
            .order_by(Payout.created_at.desc())
            .limit(10)
        )).scalars().all()
        
    if not payouts:
        await message.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –≤—ã–ø–ª–∞—Ç.")
        return
    
    status_human = {
        "pending": "üïê –û–∂–∏–¥–∞–µ—Ç –≤—ã–ø–ª–∞—Ç—ã",
        "paid": "‚úÖ –í—ã–ø–ª–∞—á–µ–Ω–æ",
        "failed": "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞",
    }
    payouts_text = "üí≥ –ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–ª–∞—Ç:\n\n"
    for payout in payouts:
        st = status_human.get(payout.status, payout.status)
        payouts_text += (
            f"–ó–∞–∫–∞–∑ #{payout.order_id}: {payout.amount_partner} KZT\n"
            f"–°—Ç–∞—Ç—É—Å: {st}\n"
            f"–î–∞—Ç–∞: {payout.created_at.strftime('%d.%m.%Y')}\n\n"
        )
    
    await message.answer(payouts_text)


@router.message(Command("partner_dashboard"))
async def cmd_partner_dashboard(message: Message) -> None:
    """Show comprehensive partner dashboard."""
    tg_id = message.from_user.id
    logger.info("partner_cmd:dashboard", extra={"user_id": tg_id})
    
    async with SessionFactory() as session:
        user = (await session.execute(select(User).where(User.tg_id == tg_id))).scalars().first()
        if not user or user.role != "partner":
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø–∞—Ä—Ç–Ω–µ—Ä.")
            return
            
        partner = (await session.execute(select(Partner).where(Partner.user_id == user.id))).scalars().first()
        if not partner:
            await message.answer("–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
            
        # Get comprehensive stats
        stats = await get_partner_statistics(session, user.id)
        
    dashboard_text = (
        f"üéØ –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–π –¥–∞—à–±–æ—Ä–¥\n\n"
        f"üîó –ö–æ–¥: {partner.referral_code}\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"  ‚Ä¢ –ü—Ä–∏–≤–µ–¥–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {stats['referred_users']}\n"
        f"  ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {stats['active_orders']}\n"
        f"  ‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {stats['completed_orders']}\n"
        f"  ‚Ä¢ –û–∂–∏–¥–∞—é—Ç –æ–ø–ª–∞—Ç—ã: {stats['pending_payouts']}\n"
        f"\nüí∞ –§–∏–Ω–∞–Ω—Å—ã:\n"
        f"  ‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['total_earned']} KZT\n"
        f"  ‚Ä¢ –û–∂–∏–¥–∞–µ—Ç –≤—ã–ø–ª–∞—Ç—ã: {stats['pending_amount']} KZT\n"
        f"  ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {stats['avg_order_value']} KZT"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="partner_detailed_stats")],
        [InlineKeyboardButton(text="üîó –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data="partner_get_link")],
        [InlineKeyboardButton(text="üí≥ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É", callback_data="partner_request_payout")],
        [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="back:main")]
    ])
    
    await message.answer(dashboard_text, reply_markup=keyboard)


async def get_partner_statistics(session, partner_user_id):
    """Get comprehensive partner statistics."""
    referred_users = (await session.execute(
        select(func.count(User.id)).where(User.referrer_id == partner_user_id)
    )).scalar()
    
    active_orders = (await session.execute(
        select(func.count(Order.id))
        .join(User, Order.client_id == User.id)
        .where(User.referrer_id == partner_user_id)
        .where(Order.status == "assigned")
    )).scalar()
    
    completed_orders = (await session.execute(
        select(func.count(Payout.id))
        .join(Order, Payout.order_id == Order.id)
        .join(User, Order.client_id == User.id)
        .where(User.referrer_id == partner_user_id)
        .where(Payout.status == "paid")
    )).scalar()
    
    pending_payouts = (await session.execute(
        select(func.count(Payout.id))
        .join(Order, Payout.order_id == Order.id)
        .join(User, Order.client_id == User.id)
        .where(User.referrer_id == partner_user_id)
        .where(Payout.status == "pending")
    )).scalar()
    
    total_earned = (await session.execute(
        select(func.coalesce(func.sum(Payout.amount_partner), 0))
        .join(Order, Payout.order_id == Order.id)
        .join(User, Order.client_id == User.id)
        .where(User.referrer_id == partner_user_id)
        .where(Payout.status == "paid")
    )).scalar()
    
    pending_amount = (await session.execute(
        select(func.coalesce(func.sum(Payout.amount_partner), 0))
        .join(Order, Payout.order_id == Order.id)
        .join(User, Order.client_id == User.id)
        .where(User.referrer_id == partner_user_id)
        .where(Payout.status == "pending")
    )).scalar()
    
    avg_order_value = (await session.execute(
        select(func.coalesce(func.avg(Payout.amount_partner * 20), 0))
        .join(Order, Payout.order_id == Order.id)
        .join(User, Order.client_id == User.id)
        .where(User.referrer_id == partner_user_id)
    )).scalar()
    
    return {
        'referred_users': referred_users,
        'active_orders': active_orders,
        'completed_orders': completed_orders,
        'pending_payouts': pending_payouts,
        'total_earned': total_earned,
        'pending_amount': pending_amount,
        'avg_order_value': int(avg_order_value) if avg_order_value else 0
    }


@router.callback_query(F.data == "partner_detailed_stats")
async def partner_detailed_stats(callback: CallbackQuery) -> None:
    """Show detailed partner statistics."""
    await callback.answer()
    await cmd_partner_stats(callback.message)


@router.callback_query(F.data == "partner_get_link")
async def partner_get_link_callback(callback: CallbackQuery) -> None:
    """Show partner link via callback."""
    await callback.answer()
    await cmd_partner_link(callback.message)


@router.callback_query(F.data == "partner_request_payout")
async def partner_request_payout(callback: CallbackQuery) -> None:
    """Handle payout request from partner."""
    await callback.answer()
    await callback.message.answer(
        "üí≥ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–ª–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
        "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã: 1000 KZT\n"
        "–í—ã–ø–ª–∞—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç—Å—è –∫–∞–∂–¥—É—é –ø—è—Ç–Ω–∏—Ü—É."
    )
