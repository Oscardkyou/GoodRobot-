"""Client (–∑–∞–∫–∞–∑—á–∏–∫) handlers and order creation flow."""
import datetime
import logging

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    Message,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)
from geopy.geocoders import Nominatim
from sqlalchemy import func, select

from app.bot.keyboards import (
    categories_keyboard,
    confirm_keyboard,
    main_menu_keyboard,
    role_keyboard,
    media_keyboard,
)
from app.bot.states import ClientActions, OrderCreate
from app.models import Bid, Order, Partner, User
from core.db import SessionFactory
from app.services.assignments import (
    AssignmentError,
    select_bid as service_select_bid,
)

logger = logging.getLogger("bot.client")

router = Router()


def location_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏."""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)],
            [KeyboardButton(text="üó∫Ô∏è –ù–∞–π—Ç–∏ –ø–æ –∞–¥—Ä–µ—Å—É"), KeyboardButton(text="üìù –í–≤–µ—Å—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")],
            [KeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"), KeyboardButton(text="üè† –ú–µ–Ω—é")],
        ],
        resize_keyboard=True,
        one_time_keyboard=False,
    )


def inline_location_keyboard() -> InlineKeyboardMarkup:
    """–í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ (–¥–ª—è edit_text)."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üó∫Ô∏è –ù–∞–π—Ç–∏ –ø–æ –∞–¥—Ä–µ—Å—É", callback_data="location:address")],
            [InlineKeyboardButton(text="üìù –í–≤–µ—Å—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã", callback_data="location:coordinates")],
            [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="location:skip")],
            [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="back:category")],
        ]
    )


def location_request_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏."""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )


@router.message(F.text == "‚ûï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑")
async def create_order_button(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞."""
    await state.set_state(OrderCreate.category)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞:",
        reply_markup=categories_keyboard()
    )


@router.message(F.text == "üìÇ –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def categories_button(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞."""
    await state.set_state(OrderCreate.category)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞:",
        reply_markup=categories_keyboard()
    )


@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext) -> None:
    """Greet user, ensure DB record, propose role selection."""
    tg_id = message.from_user.id

    # Check for referral code in start command
    args = message.text.split()
    referral_code = None
    if len(args) > 1:
        referral_code = args[1]

    logger.info("client_cmd:start", extra={"user_id": tg_id, "has_ref": bool(referral_code)})
    async with SessionFactory() as session:
        user = (await session.execute(select(User).where(User.tg_id == tg_id))).scalars().first()
        if not user:
            user = User(tg_id=tg_id, name=message.from_user.full_name or None)

            # Handle referral
            if referral_code:
                referrer = (await session.execute(
                    select(User).join(Partner, Partner.user_id == User.id)
                    .where(Partner.referral_code == referral_code.upper())
                )).scalars().first()
                if referrer:
                    user.referrer_id = referrer.id

            session.add(user)
            await session.commit()

            # Send notification to referrer
            if referral_code and referrer:
                try:
                    await message.bot.send_message(
                        chat_id=referrer.tg_id,
                        text="üéâ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!"
                    )
                except Exception:
                    pass

    await state.clear()
    await message.answer(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –º–∞—Å—Ç–µ—Ä–∞. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
        reply_markup=role_keyboard(),
    )


@router.callback_query(F.data.startswith("role:"))
async def choose_role(callback: CallbackQuery, state: FSMContext) -> None:
    role = callback.data.split(":", 1)[1]
    tg_id = callback.from_user.id
    logger.info("client_cb:choose_role", extra={"user_id": tg_id, "role": role})
    async with SessionFactory() as session:
        user = (await session.execute(select(User).where(User.tg_id == tg_id))).scalars().first()
        if user:
            user.role = role
            await session.commit()

    if role == "client":
        await callback.message.edit_text(
            "–û—Ç–ª–∏—á–Ω–æ! –í—ã –∫–ª–∏–µ–Ω—Ç. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –∏ –≤—ã–±—Ä–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞."
        )
        await callback.message.answer(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –≤—ã–∑–æ–≤–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.",
            reply_markup=main_menu_keyboard()
        )
        await state.clear()
    elif role == "master":
        await callback.message.edit_text(
            "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å –ú–∞—Å—Ç–µ—Ä."
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –º–∞—Å—Ç–µ—Ä–∞
        from app.bot.keyboards import master_main_menu_keyboard
        await callback.message.answer(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–∞—Å—Ç–µ—Ä–∞:",
            reply_markup=master_main_menu_keyboard()
        )
        await state.clear()
    elif role == "partner":
        # Create partner record if not exists
        async with SessionFactory() as session:
            user = (await session.execute(select(User).where(User.tg_id == tg_id))).scalars().first()
            partner = (await session.execute(
                select(Partner).where(Partner.user_id == user.id)
            )).scalars().first()
            if not partner:
                partner = Partner(
                    user_id=user.id,
                    slug=f"partner_{user.tg_id}",
                    referral_code=f"REF{user.tg_id:08d}"
                )
                session.add(partner)
                await session.commit()

        from app.bot.keyboards import partner_main_menu_keyboard
        await callback.message.edit_text(
            "ü§ù –û—Ç–ª–∏—á–Ω–æ! –í—ã –ø–∞—Ä—Ç–Ω–µ—Ä. –ù–∏–∂–µ –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã."
        )
        await callback.message.answer(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–∞—Ä—Ç–Ω–µ—Ä–∞:",
            reply_markup=partner_main_menu_keyboard()
        )
    await callback.answer()


@router.callback_query(F.data.startswith("order:"))
async def view_order_details_client(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å—Ç–∞–≤–∫–∞–º."""
    try:
        order_id = int(callback.data.split(":", 1)[1])
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞", show_alert=True)
        return

    tg_id = callback.from_user.id
    async with SessionFactory() as session:
        user = (await session.execute(select(User).where(User.tg_id == tg_id))).scalars().first()
        order = (await session.execute(select(Order).where(Order.id == order_id))).scalars().first()
        if not order or not user or order.client_id != user.id:
            await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ç–∞–≤–∫–∏ –Ω–∞ —ç—Ç–æ—Ç –∑–∞–∫–∞–∑
        bids_count = (await session.execute(
            select(func.count(Bid.id)).where(Bid.order_id == order_id)
        )).scalar()
        
        text = (
            f"üì¶ –ó–∞–∫–∞–∑ #{order.id}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {order.category}\n"
            f"–ê–¥—Ä–µ—Å: {order.address or '‚Äî'}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {order.description or '‚Äî'}\n"
            f"–°—Ç–∞—Ç—É—Å: {order.status}\n"
            f"–î–∞—Ç–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"–°—Ç–∞–≤–æ–∫: {bids_count}\n"
        )
        
        keyboard_buttons = [
            [InlineKeyboardButton(text="–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–æ–≤", callback_data=f"order_bids:{order.id}")],
            [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="back:category")]
        ]
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        try:
            await callback.message.edit_text(text, reply_markup=keyboard)
        except Exception:
            await callback.message.answer(text, reply_markup=keyboard)
        await callback.answer()


@router.callback_query(F.data.startswith("order_bids:"))
async def order_bids_list(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç–∞–≤–æ–∫ –ø–æ –∑–∞–∫–∞–∑—É –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞."""
    try:
        order_id = int(callback.data.split(":", 1)[1])
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞", show_alert=True)
        return

    tg_id = callback.from_user.id
    async with SessionFactory() as session:
        user = (await session.execute(select(User).where(User.tg_id == tg_id))).scalars().first()
        order = (await session.execute(select(Order).where(Order.id == order_id))).scalars().first()
        if not order or not user or order.client_id != user.id:
            await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        result = await session.execute(
            select(Bid, User)
            .join(User, User.id == Bid.master_id)
            .where(Bid.order_id == order_id)
            .order_by(Bid.created_at.desc())
        )
        bids = result.all()
        logger.info("client_cb:order_bids", extra={"user_id": tg_id, "order_id": order_id, "bids_count": len(bids)})

    if not bids:
        text = (
            f"üì¶ –ó–∞–∫–∞–∑ #{order.id}\n"
            f"–ü–æ —ç—Ç–æ–π –∑–∞—è–≤–∫–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞–≤–æ–∫."
        )
    else:
        lines = [f"üì¶ –ó–∞–∫–∞–∑ #{order.id}", "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä–æ–≤:"]
        status_map = {
            "active": "üïê –û–∂–∏–¥–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è",
            "selected": "‚úÖ –ü—Ä–∏–Ω—è—Ç–∞",
            "rejected": "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞",
        }
        for bid, master in bids[:10]:
            name = master.name or "–ú–∞—Å—Ç–µ—Ä"
            st = status_map.get(bid.status, bid.status)
            lines.append(
                f"‚Ä¢ {name}: {bid.price} KZT ‚Ä¢ {st} ‚Ä¢ {bid.created_at.strftime('%d.%m.%Y %H:%M')}"
            )
        text = "\n".join(lines)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data=f"order:{order.id}")]]
    )
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∞—Å—Ç–µ—Ä–∞, –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –≤—Å–µ –µ—â–µ –Ω–æ–≤—ã–π
    if order.status == "new" and bids:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data=f"order:{order.id}")]
        ])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç–∞–≤–∫–∏
        for bid, master in bids:
            if bid.status == "active":
                keyboard.inline_keyboard.insert(0, [
                    InlineKeyboardButton(
                        text=f"–í—ã–±—Ä–∞—Ç—å: {master.name} ({bid.price} KZT)",
                        callback_data=f"select_bid:{bid.id}"
                    )
                ])
                keyboard.inline_keyboard.insert(1, [
                    InlineKeyboardButton(
                        text=f"–ü—Ä–æ—Ñ–∏–ª—å –º–∞—Å—Ç–µ—Ä–∞: {master.name}",
                        callback_data=f"master_profile:{master.id}"
                    )
                ])

    try:
        await callback.message.edit_text(text, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"Error sending message: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(OrderCreate.category, F.data.startswith("category:"))
async def process_category_selection(callback: CallbackQuery, state: FSMContext) -> None:
    category = callback.data.split(":")[1]
    await state.update_data(category=category)

    await state.set_state(OrderCreate.location)
    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —É–∫–∞–∑–∞–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:",
        reply_markup=inline_location_keyboard()
    )
    # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    await callback.message.answer(
        "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=location_request_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "location:address")
async def location_address_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(OrderCreate.location_by_address)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ú–æ—Å–∫–≤–∞, –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 80'):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="back:location")]
        ])
    )
    await callback.answer()


@router.callback_query(F.data == "location:coordinates")
async def location_coordinates_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(OrderCreate.location_by_coordinates)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ '—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞' (–Ω–∞–ø—Ä–∏–º–µ—Ä, '55.7558, 37.6173'):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="back:location")]
        ])
    )
    await callback.answer()


@router.callback_query(F.data == "location:skip")
async def location_skip_handler(callback: CallbackQuery, state: FSMContext):
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —à–∞–≥ —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π
    await state.update_data(latitude=None, longitude=None)
    await state.set_state(OrderCreate.description)
    await callback.message.edit_text(
        "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –∑–∞–¥–∞—á—É:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="back:location")]
        ])
    )
    await callback.answer()


@router.callback_query(F.data == "back:location")
async def back_to_location(callback: CallbackQuery, state: FSMContext):
    await state.set_state(OrderCreate.location)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —É–∫–∞–∑–∞–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:",
        reply_markup=inline_location_keyboard()
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    await callback.message.answer(
        "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=location_request_keyboard()
    )
    await callback.answer()


@router.message(OrderCreate.location, F.location)
async def process_location(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    latitude = message.location.latitude
    longitude = message.location.longitude

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(latitude=latitude, longitude=longitude)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –æ–ø–∏—Å–∞–Ω–∏—é –∑–∞–∫–∞–∑–∞
    await state.set_state(OrderCreate.description)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    await message.answer(
        f"–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞: {latitude}, {longitude}\n\n–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –∑–∞–¥–∞—á—É:",
        reply_markup=ReplyKeyboardRemove()
    )


@router.message(ClientActions.waiting_location, F.location)
async def update_client_location(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–º –ø–æ –∑–∞–ø—Ä–æ—Å—É –º–∞—Å—Ç–µ—Ä–∞."""
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –æ–±—ä–µ–∫—Ç–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    latitude = message.location.latitude
    longitude = message.location.longitude

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    master_id = data.get("location_master_id")

    if not master_id:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞, –∑–∞–ø—Ä–æ—Å–∏–≤—à–µ–≥–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.",
            reply_markup=main_menu_keyboard()
        )
        await state.clear()
        return

    tg_id = message.from_user.id

    async with SessionFactory() as session:
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        client = (await session.execute(select(User).where(User.tg_id == tg_id))).scalars().first()
        if not client:
            await message.answer(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
                reply_markup=main_menu_keyboard()
            )
            await state.clear()
            return

        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞
        master = (await session.execute(select(User).where(User.id == master_id))).scalars().first()
        if not master or not master.tg_id:
            await message.answer(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–∞—Å—Ç–µ—Ä–∞.",
                reply_markup=main_menu_keyboard()
            )
            await state.clear()
            return

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–æ–º –∏ –º–∞—Å—Ç–µ—Ä–æ–º
        order = (await session.execute(
            select(Order).where(
                Order.client_id == client.id,
                Order.master_id == master.id,
                Order.status.in_(["assigned", "inprogress"])
            ).order_by(Order.created_at.desc())
        )).scalars().first()

        if not order:
            await message.answer(
                "–ù–µ –Ω–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ —Å —ç—Ç–∏–º –º–∞—Å—Ç–µ—Ä–æ–º.",
                reply_markup=main_menu_keyboard()
            )
            await state.clear()
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –≤ –∑–∞–∫–∞–∑–µ
        order.latitude = latitude
        order.longitude = longitude
        order.location_updated_at = datetime.datetime.now()
        await session.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—É
        try:
            await message.bot.send_message(
                chat_id=master.tg_id,
                text=f"‚úÖ –ö–ª–∏–µ–Ω—Ç {client.name or '–∫–ª–∏–µ–Ω—Ç'} –æ–±–Ω–æ–≤–∏–ª –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order.id}."
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–∞—Å—Ç–µ—Ä—É –∫–∞—Ä—Ç—É —Å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            await message.bot.send_location(
                chat_id=master.tg_id,
                latitude=latitude,
                longitude=longitude
            )
        except Exception as e:
            logger.error(
                "failed_to_notify_master_about_location_update",
                extra={
                    "master_id": master.id,
                    "client_id": client.id,
                    "order_id": order.id,
                    "error": str(e)
                }
            )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    await message.answer(
        "‚úÖ –í–∞—à–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–∞—Å—Ç–µ—Ä—É.",
        reply_markup=main_menu_keyboard()
    )

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


@router.callback_query(F.data.startswith("decline_location:"))
async def decline_location_update(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏."""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    master_id = data.get("location_master_id")

    if not master_id:
        await callback.message.edit_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞, –∑–∞–ø—Ä–æ—Å–∏–≤—à–µ–≥–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é."
        )
        await callback.answer()
        await state.clear()
        return

    tg_id = callback.from_user.id

    async with SessionFactory() as session:
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        client = (await session.execute(select(User).where(User.tg_id == tg_id))).scalars().first()
        if not client:
            await callback.message.edit_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
            )
            await callback.answer()
            await state.clear()
            return

        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Ç–µ—Ä–∞
        master = (await session.execute(select(User).where(User.id == master_id))).scalars().first()
        if not master or not master.tg_id:
            await callback.message.edit_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–∞—Å—Ç–µ—Ä–∞."
            )
            await callback.answer()
            await state.clear()
            return

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–æ–º –∏ –º–∞—Å—Ç–µ—Ä–æ–º
        order = (await session.execute(
            select(Order).where(
                Order.client_id == client.id,
                Order.master_id == master.id,
                Order.status.in_(["assigned", "inprogress"])
            ).order_by(Order.created_at.desc())
        )).scalars().first()

        if not order:
            await callback.message.edit_text(
                "–ù–µ –Ω–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ —Å —ç—Ç–∏–º –º–∞—Å—Ç–µ—Ä–æ–º."
            )
            await callback.answer()
            await state.clear()
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—É –æ–± –æ—Ç–∫–∞–∑–µ
        try:
            await callback.bot.send_message(
                chat_id=master.tg_id,
                text=f"‚ùå –ö–ª–∏–µ–Ω—Ç {client.name or '–∫–ª–∏–µ–Ω—Ç'} –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order.id}."
            )
        except Exception as e:
            logger.error(
                "failed_to_notify_master_about_location_decline",
                extra={
                    "master_id": master.id,
                    "client_id": client.id,
                    "order_id": order.id,
                    "error": str(e)
                }
            )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    await callback.message.edit_text(
        "–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏."
    )
    await callback.message.answer(
        "–í—ã –º–æ–∂–µ—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –ø–æ–∑–∂–µ, –µ—Å–ª–∏ –º–∞—Å—Ç–µ—Ä –∑–∞–ø—Ä–æ—Å–∏—Ç –µ—ë —Å–Ω–æ–≤–∞.",
        reply_markup=main_menu_keyboard()
    )

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    await callback.answer()


@router.callback_query(F.data == "back:category")
async def back_to_category_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(OrderCreate.category)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞—è–≤–∫–∏:",
        reply_markup=categories_keyboard()
    )
    await callback.answer()


@router.message(OrderCreate.location_by_coordinates)
async def process_coordinates(message: Message, state: FSMContext) -> None:
    # –ü–∞—Ä—Å–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        coords = message.text.strip().replace(' ', '').split(',')
        if len(coords) != 2:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ '—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞'."
            )
            return

        latitude = float(coords[0])
        longitude = float(coords[1])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        if -90 <= latitude <= 90 and -180 <= longitude <= 180:
            await state.update_data(latitude=str(latitude), longitude=str(longitude))

            await message.answer(
                f"‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—Ä–∏–Ω—è—Ç—ã!\n"
                f"üìç –®–∏—Ä–æ—Ç–∞: {latitude}\n"
                f"üìç –î–æ–ª–≥–æ—Ç–∞: {longitude}\n\n"
                "–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –∑–∞–¥–∞—á—É:"
            )
            await state.set_state(OrderCreate.description)
        else:
            await message.answer(
                "‚ùå –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞. –®–∏—Ä–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç -90 –¥–æ 90, –¥–æ–ª–≥–æ—Ç–∞ –æ—Ç -180 –¥–æ 180."
            )
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞'."
        )


@router.message(OrderCreate.location_by_address)
async def create_address(message: Message, state: FSMContext) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–¥—Ä–µ—Å –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.

    –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º —Ç–µ—Å—Ç–æ–≤: —Å–æ—Ö—Ä–∞–Ω—è–µ–º address –≤ state,
    –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å request_location –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ OrderCreate.location.
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å
    await state.update_data(address=message.text)

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)]],
        resize_keyboard=True,
        one_time_keyboard=True,
    )

    # –ü—Ä–æ—Å–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã/–≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±.",
        reply_markup=kb,
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–∂–∏–¥–∞–Ω–∏—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    await state.set_state(OrderCreate.location)


# --- Handlers required by tests: create_location, skip_location, handle_location_button_text ---
async def create_location(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ —Ç–µ—Å—Ç–∞–º:
    - –ï—Å–ª–∏ message.location –µ—Å—Ç—å: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ OrderCreate.media.
    - –ï—Å–ª–∏ –Ω–µ—Ç: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏ —Ç–∞–∫–∂–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ OrderCreate.media.
    –í –æ–±–æ–∏—Ö —Å–ª—É—á–∞—è—Ö –ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞ (media_keyboard).
    """
    loc = getattr(message, "location", None)
    if loc is not None and hasattr(loc, "latitude") and hasattr(loc, "longitude"):
        await state.update_data(latitude=str(loc.latitude), longitude=str(loc.longitude))
        await message.answer(
            "‚úÖ –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞!",
            reply_markup=media_keyboard(),
        )
    else:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—ë –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±.",
            reply_markup=media_keyboard(),
        )
    # –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞
    await state.set_state(OrderCreate.media)


async def skip_location(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–¥–∏–∞."""
    await message.answer(
        "‚è≠Ô∏è –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ) –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥.",
        reply_markup=media_keyboard(),
    )
    await state.set_state(OrderCreate.media)


async def handle_location_button_text(message: Message, state: FSMContext) -> None:
    """–ü–æ—è—Å–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É request_location.

    –¢–µ—Å—Ç –æ–∂–∏–¥–∞–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å request_location=True.
    """
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —É –∫–ª–∏–µ–Ω—Ç–∞
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)]],
        resize_keyboard=True,
        one_time_keyboard=True,
    )
    await message.answer(
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–∞—à–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º.",
        reply_markup=kb,
    )


@router.message(OrderCreate.description)
async def process_description(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    description = message.text
    if not description or len(description.strip()) < 3:
        await message.answer(
            "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –∑–∞–¥–∞—á—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ."
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(description=description, media=[])

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    data = await state.get_data()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirmation_text = (
        "üìã –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞:\n\n"
        f"üîß –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category')}\n"
    )

    if data.get('latitude') and data.get('longitude'):
        confirmation_text += f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {data.get('latitude')}, {data.get('longitude')}\n"

    confirmation_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
    confirmation_text += "–í—Å—ë –≤–µ—Ä–Ω–æ?"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    await message.answer(
        confirmation_text,
        reply_markup=confirm_keyboard()
    )


@router.callback_query(F.data == "confirm:yes")
async def order_create_confirm_handler(callback: CallbackQuery, state: FSMContext):
    # Save order to DB
    data = await state.get_data()
    tg_id = callback.from_user.id
    async with SessionFactory() as session:
        user = (await session.execute(select(User).where(User.tg_id == tg_id))).scalars().first()

        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –ë–î
        order = Order(
            client_id=user.id,
            category=data["category"],
            address=data.get("address"),
            latitude=str(data.get("latitude")) if data.get("latitude") else None,
            longitude=str(data.get("longitude")) if data.get("longitude") else None,
            description=data["description"],
            media=data.get("media"),
        )
        session.add(order)
        await session.commit()
        await session.refresh(order)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤
        masters = (await session.execute(
            select(User).where(User.role == "master")
        )).scalars().all()

        await state.clear()
        await callback.message.edit_text("–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞! –ú–∞—Å—Ç–µ—Ä–∞ –±—É–¥—É—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω—ã.")

    # Send notifications outside transaction
    logger.info("client_order:created", extra={"user_id": tg_id, "order_id": order.id, "masters_count": len(masters)})
    for m in masters:
        if m.tg_id:
            try:
                await callback.message.bot.send_message(
                    chat_id=m.tg_id,
                    text=(
                        "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞:\n"
                        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category')}\n"
                        f"–ê–¥—Ä–µ—Å: {data.get('address')}\n"
                        f"–û–ø–∏—Å–∞–Ω–∏–µ: {data.get('description')}\n"
                        f"–ú–µ–¥–∏–∞: {len(data.get('media', []) or [])} —Ñ–∞–π–ª(–æ–≤)"
                    ),
                    reply_markup=InlineKeyboardMarkup(
                        inline_keyboard=[[InlineKeyboardButton(text="–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è", callback_data=f"bid:{order.id}")]]
                    ),
                )
            except Exception:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
                pass
    await callback.answer()


@router.message(F.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def profile_button(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞."""
    tg_id = message.from_user.id
    async with SessionFactory() as session:
        user = (await session.execute(select(User).where(User.tg_id == tg_id))).scalars().first()
        if not user:
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
            return

        profile_text = (
            f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
            f"–ò–º—è: {user.name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"–†–æ–ª—å: {user.role or '–ù–µ –≤—ã–±—Ä–∞–Ω–∞'}\n"
            f"ID: {user.tg_id}\n"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å", callback_data="change_role")]
        ])

        await message.answer(profile_text, reply_markup=keyboard)


@router.message(F.text == "üí¨ –°–æ–æ–±—â–µ–Ω–∏—è")
async def messages_button(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–æ–æ–±—â–µ–Ω–∏—è' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞."""
    await message.answer("üí¨ –§—É–Ω–∫—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —á–∞—Ç Telegram –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –º–∞—Å—Ç–µ—Ä–∞–º–∏.")


@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_button(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞."""
    tg_id = message.from_user.id
    async with SessionFactory() as session:
        user = (await session.execute(select(User).where(User.tg_id == tg_id))).scalars().first()
        if not user:
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
            return

        settings_text = (
            f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n"
            f"–ò–º—è: {user.name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å", callback_data="change_role")]
        ])

        await message.answer(settings_text, reply_markup=keyboard)


@router.message(F.text == "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def my_orders_button(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ–∏ –∑–∞–∫–∞–∑—ã' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞."""
    tg_id = message.from_user.id
    async with SessionFactory() as session:
        user = (await session.execute(select(User).where(User.tg_id == tg_id))).scalars().first()
        if not user:
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–∞
        orders_query = select(Order).where(
            Order.client_id == user.id
        ).order_by(Order.created_at.desc())

        orders = (await session.execute(orders_query)).scalars().all()

    if not orders:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        return

    await message.answer("üì¶ –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:")

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É
    new_orders = [order for order in orders if order.status == "new"]
    active_orders = [order for order in orders if order.status in ["assigned", "inprogress"]]
    completed_orders = [order for order in orders if order.status == "done"]

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã (–æ–∂–∏–¥–∞—é—â–∏–µ —Å—Ç–∞–≤–æ–∫)
    if new_orders:
        await message.answer("üü° –û–∂–∏–¥–∞–Ω–∏–µ —Å—Ç–∞–≤–æ–∫:")
        for order in new_orders[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 –∑–∞–∫–∞–∑–æ–≤
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ç–∞–≤–∫–∏ –Ω–∞ —ç—Ç–æ—Ç –∑–∞–∫–∞–∑
            bids_count = (await session.execute(
                select(func.count(Bid.id)).where(Bid.order_id == order.id)
            )).scalar()
            
            order_text = (
                f"üì¶ –ó–∞–∫–∞–∑ #{order.id}\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {order.category}\n"
                f"–°—Ç–∞–≤–æ–∫: {bids_count}\n"
                f"–î–∞—Ç–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            )

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"order:{order.id}")]
            ])

            await message.answer(order_text, reply_markup=keyboard)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    if active_orders:
        await message.answer("üîµ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:")
        for order in active_orders[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 –∑–∞–∫–∞–∑–æ–≤
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Å—Ç–µ—Ä–µ
            master = (await session.execute(select(User).where(User.id == order.master_id))).scalars().first()
            master_name = master.name if master else "–ú–∞—Å—Ç–µ—Ä"
            
            order_text = (
                f"üì¶ –ó–∞–∫–∞–∑ #{order.id} (–í —Ä–∞–±–æ—Ç–µ)\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {order.category}\n"
                f"–ú–∞—Å—Ç–µ—Ä: {master_name}\n"
                f"–î–∞—Ç–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            )

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"order:{order.id}")]
            ])

            await message.answer(order_text, reply_markup=keyboard)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    if completed_orders:
        await message.answer("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:")
        for order in completed_orders[:3]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 3 –∑–∞–∫–∞–∑–æ–≤
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Å—Ç–µ—Ä–µ
            master = (await session.execute(select(User).where(User.id == order.master_id))).scalars().first()
            master_name = master.name if master else "–ú–∞—Å—Ç–µ—Ä"
            
            order_text = (
                f"üì¶ –ó–∞–∫–∞–∑ #{order.id} (–ó–∞–≤–µ—Ä—à–µ–Ω)\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {order.category}\n"
                f"–ú–∞—Å—Ç–µ—Ä: {master_name}\n"
                f"–î–∞—Ç–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            )

            await message.answer(order_text)


@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def help_button(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤."""
    help_text = (
        "üìñ –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞ (—Ä–µ–∂–∏–º –∫–ª–∏–µ–Ω—Ç–∞):\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/menu - –û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
        "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚ûï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑'.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã –≤ —Ä–∞–∑–¥–µ–ª–µ 'üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã'.\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        "- –í —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å' –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ\n"
        "- –í —Ä–∞–∑–¥–µ–ª–µ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –∏–ª–∏ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n"
    )
    await message.answer(help_text)


@router.callback_query(F.data == "confirm:no")
async def order_create_cancel_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    data = await state.get_data()
    category = data.get("category")

    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—Ç–º–µ–Ω–µ
    await callback.message.edit_text(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
    )

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞—è–≤–∫–∏ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=categories_keyboard(with_back=True)
    )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await state.set_state(OrderCreate.category)
    await callback.answer()


@router.callback_query(F.data.startswith("select_bid:"))
async def select_bid_callback(callback: CallbackQuery, state: FSMContext) -> None:
    """–ö–ª–∏–µ–Ω—Ç –≤—ã–±–∏—Ä–∞–µ—Ç —Å—Ç–∞–≤–∫—É –º–∞—Å—Ç–µ—Ä–∞.

    –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ "assigned", —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞,
    –ø–æ–º–µ—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç–∞–≤–∫—É –∫–∞–∫ "selected", –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞–∫ "rejected".
    """
    try:
        bid_id = int(callback.data.split(":", 1)[1])
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞–≤–∫–∏", show_alert=True)
        return

    tg_id = callback.from_user.id
    async with SessionFactory() as session:
        try:
            order = await service_select_bid(session, bid_id=bid_id, client_tg_id=tg_id)
        except AssignmentError as e:
            await callback.answer(str(e), show_alert=True)
            return
        except Exception:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–∞—Å—Ç–µ—Ä–∞", show_alert=True)
            return

        # –£–≤–µ–¥–æ–º–∏–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞, –µ—Å–ª–∏ –µ—Å—Ç—å tg_id
        master = (await session.execute(select(User).where(User.id == order.master_id))).scalars().first()
        if master and master.tg_id:
            try:
                await callback.message.bot.send_message(
                    chat_id=master.tg_id,
                    text=(
                        "‚úÖ –í–∞—Å –≤—ã–±—Ä–∞–ª–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞!\n"
                        f"–ó–∞–∫–∞–∑ #{order.id} ‚Äî —Å—Ç–∞—Ç—É—Å: {order.status}"
                    ),
                )
            except Exception:
                pass

        # –û–±–Ω–æ–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        text = (
            f"üì¶ –ó–∞–∫–∞–∑ #{order.id} ‚Äî –º–∞—Å—Ç–µ—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω\n"
            f"–°—Ç–∞—Ç—É—Å: {order.status}\n"
            f"–ú–∞—Å—Ç–µ—Ä: {master.name if master else '‚Äî'}"
        )
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="¬´ –ù–∞–∑–∞–¥", callback_data="back:category")]
            ]
        )
        try:
            await callback.message.edit_text(text, reply_markup=keyboard)
        except Exception:
            await callback.message.answer(text, reply_markup=keyboard)
        await callback.answer("–ú–∞—Å—Ç–µ—Ä –≤—ã–±—Ä–∞–Ω")
