"""Client (–∑–∞–∫–∞–∑—á–∏–∫) handlers and order creation flow."""
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton, InlineKeyboardMarkup

from sqlalchemy import select

from app.bot.keyboards import (
    categories_keyboard,
    confirm_keyboard,
    role_keyboard,
    zones_keyboard,
    main_menu_keyboard,
    add_back_button,
)
from app.bot.states import MasterSetup, OrderCreate
from app.models import Order, User, Partner
from core.db import SessionFactory

router = Router()


@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext) -> None:
    """Greet user, ensure DB record, propose role selection."""
    tg_id = message.from_user.id
    
    # Check for referral code in start command
    args = message.text.split()
    referral_code = None
    if len(args) > 1:
        referral_code = args[1]
    
    async with SessionFactory() as session:
        user = (await session.execute(select(User).where(User.tg_id == tg_id))).scalars().first()
        if not user:
            user = User(tg_id=tg_id, name=message.from_user.full_name or None)
            
            # Handle referral
            if referral_code:
                referrer = (await session.execute(
                    select(User).join(Partner, Partner.user_id == User.id)
                    .where(Partner.referral_code == referral_code.upper())
                )).scalars().first()
                if referrer:
                    user.referrer_id = referrer.id
                    
            session.add(user)
            await session.commit()
            
            # Send notification to referrer
            if referral_code and referrer:
                try:
                    await message.bot.send_message(
                        chat_id=referrer.tg_id,
                        text=f"üéâ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!"
                    )
                except Exception:
                    pass

    await state.clear()
    await message.answer(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –º–∞—Å—Ç–µ—Ä–∞. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
        reply_markup=role_keyboard(),
    )


@router.callback_query(F.data.startswith("role:"))
async def choose_role(callback: CallbackQuery, state: FSMContext) -> None:
    role = callback.data.split(":", 1)[1]
    tg_id = callback.from_user.id
    async with SessionFactory() as session:
        user = (await session.execute(select(User).where(User.tg_id == tg_id))).scalars().first()
        if user:
            user.role = role
            await session.commit()

    if role == "client":
        await callback.message.edit_text(
            "–û—Ç–ª–∏—á–Ω–æ! –í—ã –∫–ª–∏–µ–Ω—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞—è–≤–∫–∏:",
            reply_markup=categories_keyboard(with_back=False),
        )
        await callback.message.answer(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –≤—ã–∑–æ–≤–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.",
            reply_markup=main_menu_keyboard()
        )
        await state.set_state(OrderCreate.category)
    elif role == "master":
        from app.bot.keyboards import zones_keyboard_master
        await callback.message.edit_text(
            "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å –ú–∞—Å—Ç–µ—Ä. –£–∫–∞–∂–∏—Ç–µ —Ä–∞–π–æ–Ω—ã –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
            reply_markup=zones_keyboard_master(),
        )
        await state.set_state(MasterSetup.zones)
    elif role == "partner":
        # Create partner record if not exists
        async with SessionFactory() as session:
            user = (await session.execute(select(User).where(User.tg_id == tg_id))).scalars().first()
            partner = (await session.execute(
                select(Partner).where(Partner.user_id == user.id)
            )).scalars().first()
            if not partner:
                partner = Partner(
                    user_id=user.id,
                    slug=f"partner_{user.tg_id}",
                    referral_code=f"REF{user.tg_id:08d}"
                )
                session.add(partner)
                await session.commit()
        
        await callback.message.edit_text(
            "ü§ù –û—Ç–ª–∏—á–Ω–æ! –í—ã –ø–∞—Ä—Ç–Ω–µ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/partner_dashboard - –≤–∞—à –¥–∞—à–±–æ—Ä–¥\n"
            "/partner_link - —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞\n"
            "/partner_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "/partner_payouts - –∏—Å—Ç–æ—Ä–∏—è –≤—ã–ø–ª–∞—Ç"
        )
    await callback.answer()


@router.callback_query(OrderCreate.category, F.data.startswith("cat:"))
async def create_pick_category(callback: CallbackQuery, state: FSMContext) -> None:
    category = callback.data.split(":", 1)[1]
    await state.update_data(category=category)
    await callback.message.edit_text(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:",
        reply_markup=zones_keyboard(with_back=True),
    )
    await state.set_state(OrderCreate.zone)
    await callback.answer()


@router.callback_query(OrderCreate.zone, F.data.startswith("zone:"))
async def create_pick_zone(callback: CallbackQuery, state: FSMContext) -> None:
    zone = callback.data.split(":", 1)[1]
    await state.update_data(zone=zone)
    await callback.message.edit_text(
        f"–†–∞–π–æ–Ω: {zone}\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å (—Ç–µ–∫—Å—Ç–æ–º):"
    )
    await state.set_state(OrderCreate.address)
    await callback.answer()


@router.message(OrderCreate.address)
async def create_address(message: Message, state: FSMContext) -> None:
    await state.update_data(address=message.text.strip())
    await message.answer("–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É/–∑–∞–¥–∞—á—É (—Ç–µ–∫—Å—Ç–æ–º):")
    await state.set_state(OrderCreate.description)


@router.message(OrderCreate.description)
async def create_description(message: Message, state: FSMContext) -> None:
    await state.update_data(description=message.text.strip())
    data = await state.get_data()
    summary = (
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞—è–≤–∫—É:\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category')}\n"
        f"–†–∞–π–æ–Ω: {data.get('zone')}\n"
        f"–ê–¥—Ä–µ—Å: {data.get('address')}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {data.get('description')}\n"
    )
    await message.answer(summary, reply_markup=confirm_keyboard(with_back=True))
    await state.set_state(OrderCreate.confirm)


@router.callback_query(F.data.startswith("back:"))
async def handle_back_button(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –¥–ª—è –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π."""
    back_to = callback.data.split(":", 1)[1] if ":" in callback.data else "main"
    current_state = await state.get_state()
    
    if back_to == "main" or not current_state:
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await state.clear()
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞—è–≤–∫–∏:",
            reply_markup=categories_keyboard(with_back=False),
        )
        await state.set_state(OrderCreate.category)
        await callback.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    elif back_to == "order_create" and current_state == OrderCreate.zone:
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞—è–≤–∫–∏:",
            reply_markup=categories_keyboard(with_back=False),
        )
        await state.set_state(OrderCreate.category)
        await callback.answer("–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    elif back_to == "confirm" and current_state == OrderCreate.confirm:
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É –∏–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        data = await state.get_data()
        await callback.message.edit_text(
            "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É/–∑–∞–¥–∞—á—É (—Ç–µ–∫—Å—Ç–æ–º):",
        )
        await state.set_state(OrderCreate.description)
        await callback.answer("–í–æ–∑–≤—Ä–∞—Ç –∫ –æ–ø–∏—Å–∞–Ω–∏—é –ø—Ä–æ–±–ª–µ–º—ã")
    else:
        # –ï—Å–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await callback.answer("–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
        return


@router.message(Command("menu"))
async def cmd_menu(message: Message, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
    await state.clear()
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu_keyboard()
    )


@router.message(F.text == "üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑")
async def create_order_button(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞."""
    await state.clear()
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞—è–≤–∫–∏:",
        reply_markup=categories_keyboard(with_back=False)
    )
    await state.set_state(OrderCreate.category)


@router.message(F.text == "üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def my_orders_button(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–æ–≤."""
    tg_id = message.from_user.id
    
    async with SessionFactory() as session:
        user = (await session.execute(select(User).where(User.tg_id == tg_id))).scalars().first()
        if not user:
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
            return
            
        orders = (await session.execute(
            select(Order).where(Order.client_id == user.id).order_by(Order.created_at.desc())
        )).scalars().all()
    
    if not orders:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ '–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑'.")
        return
        
    for order in orders[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–∫–∞–∑–æ–≤
        status_text = {
            "new": "üîµ –ù–æ–≤—ã–π",
            "active": "üü° –í –ø—Ä–æ—Ü–µ—Å—Å–µ",
            "completed": "üü¢ –ó–∞–≤–µ—Ä—à–µ–Ω",
            "cancelled": "üî¥ –û—Ç–º–µ–Ω–µ–Ω"
        }.get(order.status, "üîµ –ù–æ–≤—ã–π")
        
        order_text = (
            f"–ó–∞–∫–∞–∑ #{order.id}: {status_text}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {order.category}\n"
            f"–†–∞–π–æ–Ω: {order.zone}\n"
            f"–î–∞—Ç–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"order:{order.id}")]
        ])
        
        await message.answer(order_text, reply_markup=keyboard)


@router.message(F.text == "üîç –ü–æ–∏—Å–∫")
async def search_button(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞."""
    await message.answer(
        "–§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å –º–∞—Å—Ç–µ—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ —Ä–∞–π–æ–Ω–∞–º."
    )


@router.message(F.text == "üë®‚Äçüîß –ü—Ä–æ—Ñ–∏–ª—å")
async def profile_button(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è."""
    tg_id = message.from_user.id
    
    async with SessionFactory() as session:
        user = (await session.execute(select(User).where(User.tg_id == tg_id))).scalars().first()
        if not user:
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
            return
            
        role_text = {
            "client": "üë§ –ö–ª–∏–µ–Ω—Ç",
            "master": "üë®‚Äçüîß –ú–∞—Å—Ç–µ—Ä",
            "partner": "ü§ù –ü–∞—Ä—Ç–Ω–µ—Ä"
        }.get(user.role, "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
        
        profile_text = (
            f"üìù –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
            f"–ò–º—è: {user.name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"–†–æ–ª—å: {role_text}\n"
        )
        
        if user.role == "master" and user.zones:
            profile_text += f"–†–∞–π–æ–Ω—ã –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è: {', '.join(user.zones)}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–æ–ª–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å", callback_data="change_role")]
        ])
        
        await message.answer(profile_text, reply_markup=keyboard)


@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def help_button(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏."""
    help_text = (
        "üìñ –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/menu - –û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
        "–î–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤:\n"
        "- –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∑–∞–∫–∞–∑—ã –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç –º–∞—Å—Ç–µ—Ä–æ–≤\n"
        "- –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤\n\n"
        "–î–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤:\n"
        "- –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö\n"
        "- –î–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫–∏ –Ω–∞ –∑–∞–∫–∞–∑—ã\n\n"
        "–î–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤:\n"
        "- –ü–æ–ª—É—á–∞–π—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏\n"
        "- –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –≤—ã–ø–ª–∞—Ç—ã\n"
    )
    
    await message.answer(help_text)


@router.callback_query(OrderCreate.confirm, F.data.startswith("confirm:"))
async def create_confirm(callback: CallbackQuery, state: FSMContext) -> None:
    decision = callback.data.split(":", 1)[1]
    if decision == "no":
        await state.clear()
        await callback.message.edit_text("–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await callback.answer()
        return

    # Save order to DB
    data = await state.get_data()
    tg_id = callback.from_user.id
    async with SessionFactory() as session:
        user = (await session.execute(select(User).where(User.tg_id == tg_id))).scalars().first()
        order = Order(
            client_id=user.id,
            category=data.get("category"),
            zone=data.get("zone"),
            address=data.get("address"),
            description=data.get("description"),
        )
        session.add(order)
        await session.commit()
        await session.refresh(order)

        # Notify masters serving this zone
        masters = (
            await session.execute(
                select(User).where(
                    User.role == "master",
                    User.zones.contains([data.get("zone")]),
                )
            )
        ).scalars().all()

    await state.clear()
    await callback.message.edit_text("–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞! –ú–∞—Å—Ç–µ—Ä–∞ –±—É–¥—É—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω—ã.")

    # Send notifications outside transaction
    for m in masters:
        if m.tg_id:
            try:
                await callback.message.bot.send_message(
                    chat_id=m.tg_id,
                    text=(
                        "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞:\n"
                        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category')}\n"
                        f"–†–∞–π–æ–Ω: {data.get('zone')}\n"
                        f"–ê–¥—Ä–µ—Å: {data.get('address')}\n"
                        f"–û–ø–∏—Å–∞–Ω–∏–µ: {data.get('description')}"
                    ),
                    reply_markup=InlineKeyboardMarkup(
                        inline_keyboard=[[InlineKeyboardButton(text="–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è", callback_data=f"bid:{order.id}")]]
                    ),
                )
            except Exception:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
                pass
    await callback.answer()
